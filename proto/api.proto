syntax = "proto3";
package proto;

option go_package = "./proto";

import "common.proto";
import "druid.proto";
import "hunter.proto";
import "mage.proto";
import "paladin.proto";
import "priest.proto";
import "rogue.proto";
import "shaman.proto";
import "warlock.proto";
import "warrior.proto";

message Player {
		// Label used for logging.
		string name = 16;

    Race race = 1;
    Class class = 2;

    EquipmentSpec equipment = 3;
    Consumes consumes = 4;
    repeated double bonus_stats = 5;

		IndividualBuffs buffs = 15;

    oneof spec {
        BalanceDruid balance_druid = 6;
        Hunter hunter = 7;
        Mage mage = 8;
        RetributionPaladin retribution_paladin = 9;
        ShadowPriest shadow_priest = 10;
        Rogue rogue = 11;
        ElementalShaman elemental_shaman = 12;
        EnhancementShaman enhancement_shaman = 18;
        Warlock warlock = 13;
        Warrior warrior = 14;
    }

		// Only used by the UI. Sim uses talents within the spec protos.
		string talentsString = 17;

		Cooldowns cooldowns = 19;
}

message Party {
    repeated Player players = 1;

		PartyBuffs buffs = 2;
}

message Raid {
    repeated Party parties = 1; 

		RaidBuffs buffs = 2;
}

message SimOptions {
    int32 iterations = 1;
    int64 random_seed = 2;
    bool debug = 3; // Enables debug logging.
    bool debug_first_iteration = 6;
		bool is_test = 5; // Only used internally.
}

// The aggregated results from all uses of a particular action.
message ActionMetrics {
		ActionID id = 1;

		// True if a melee action, false if a spell action.
		bool is_melee = 11;

		// # of times this action was used by the agent.
    int32 casts = 2;

		// # of times this action hit a target. For cleave spells this can be larger than casts.
    int32 hits = 3;

		// # of times this action was a critical strike.
    int32 crits = 4;

		// # of times this action was a Miss or Resist.
    int32 misses = 5;

		// # of times this action was a Dodge.
    int32 dodges = 7;

		// # of times this action was a Parry.
    int32 parries = 8;

		// # of times this action was a Block.
    int32 blocks = 9;

		// # of times this action was a Glance.
    int32 glances = 10;

		// Total damage done to all targets by this action.
    double damage = 6;
}

message AuraMetrics {
		ActionID id = 1;

		double uptime_seconds_avg = 2;
		double uptime_seconds_stdev = 3;
}

message DistributionMetrics {
    double avg   = 1;
    double stdev = 2;
    double max   = 3;
    map<int32, int32> hist = 4;
}

// All the results for a single Player.
message PlayerMetrics {
		DistributionMetrics dps = 1;

    // average seconds spent oom per iteration
    double seconds_oom_avg = 3; 

    repeated ActionMetrics actions = 5;
		repeated AuraMetrics auras = 6;

		repeated PlayerMetrics pets = 7;
}

// Results for a whole raid.
message PartyMetrics {
		DistributionMetrics dps = 1;

		repeated PlayerMetrics players = 2;
}

// Results for a whole raid.
message RaidMetrics {
		DistributionMetrics dps = 1;

		repeated PartyMetrics parties = 2;
}

message TargetMetrics {
		repeated AuraMetrics auras = 1;
}

message EncounterMetrics {
		repeated TargetMetrics targets = 1;
}

// RPC RaidSim
message RaidSimRequest {
    Raid raid = 1;
    Encounter encounter = 2;
		SimOptions sim_options = 3;
}

// Result from running the raid sim.
message RaidSimResult {
		RaidMetrics raid_metrics = 1;
		EncounterMetrics encounter_metrics = 2;

		string logs = 3;
}

// RPC GearList
message GearListRequest {
}
message GearListResult {
    repeated Item items = 1;
    repeated Enchant enchants = 2;
    repeated Gem gems = 3;
}

// RPC ComputeStats
message ComputeStatsRequest {
    Raid raid = 1;
}
message PlayerStats {
    repeated double gear_only = 1;
    repeated double final_stats = 2;
    repeated string sets = 3;
		IndividualBuffs buffs = 4;
		repeated ActionID cooldowns = 5;
}
message PartyStats {
    repeated PlayerStats players = 1;
}
message RaidStats {
    repeated PartyStats parties = 1;
}
message ComputeStatsResult {
		RaidStats raid_stats = 1;
}

// RPC StatWeights
message StatWeightsRequest {
    Player player = 1;
    RaidBuffs raid_buffs = 2;
    PartyBuffs party_buffs = 3;
    Encounter encounter = 4;
		SimOptions sim_options = 5;

    repeated Stat stats_to_weigh = 6;
    Stat ep_reference_stat = 7;
}
message StatWeightsResult {
    repeated double weights = 1;
    repeated double weights_stdev = 2;
    repeated double ep_values = 3;
    repeated double ep_values_stdev = 4;
}

message AsyncAPIResult {
  string progress_id = 1;
} 

// ProgressMetrics are used by all async APIs
message ProgressMetrics {
    int32 completed_iterations = 1;
    int32 total_iterations = 2;
    int32 completed_sims = 3;
    int32 total_sims = 4;

    // Partial Results 
    double dps = 5;

    // Final Results
    RaidSimResult final_raid_result = 6; // only set when completed
    StatWeightsResult final_weight_result = 7;
}
