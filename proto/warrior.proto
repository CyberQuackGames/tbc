syntax = "proto3";
package proto;

option go_package = "./proto";

message WarriorTalents {
	// Arms
	int32 improved_heroic_strike = 1;
	int32 deflection = 45;
	int32 improved_rend = 2;
	int32 improved_charge = 3;
	int32 improved_thunder_clap = 4;
	int32 improved_overpower = 5;
	bool anger_management = 6;
	int32 deep_wounds = 7;
	int32 two_handed_weapon_specialization = 8;
	int32 impale = 9;
	int32 poleaxe_specialization = 10;
	bool death_wish = 11;
	int32 mace_specialization = 12;
	int32 sword_specialization = 13;
	int32 improved_disciplines = 14;
	int32 blood_frenzy = 15;
	bool mortal_strike = 16;
	int32 improved_mortal_strike = 17;
	bool endless_rage = 18;

	// Fury
	int32 booming_voice = 19;
	int32 cruelty = 20;
	int32 improved_demoralizing_shout = 46;
	int32 unbridled_wrath = 21;
	int32 improved_cleave = 22;
	int32 commanding_presence = 23;
	int32 dual_wield_specialization = 24;
	int32 improved_execute = 25;
	int32 improved_slam = 26;
	bool sweeping_strikes = 27;
	int32 weapon_mastery = 28;
	int32 improved_berserker_rage = 29;
	int32 flurry = 30;
	int32 precision = 31;
	bool bloodthirst = 32;
	int32 improved_whirlwind = 33;
	int32 improved_berserker_stance = 34;
	bool rampage = 35;

	// Protection
	int32 improved_bloodrage = 36;
	int32 tactical_mastery = 37;
	int32 anticipation = 47;
	int32 shield_specialization = 48;
	int32 toughness = 49;
	bool improved_shield_block = 50;
	int32 defiance = 38;
	int32 improved_sunder_armor = 39;
	int32 shield_mastery = 51;
	int32 one_handed_weapon_specialization = 40;
	int32 improved_defensive_stance = 52;
	bool shield_slam = 41;
	int32 focused_rage = 42;
	int32 vitality = 43;
	bool devastate = 44;
}

enum WarriorShout {
	WarriorShoutNone = 0;
	WarriorShoutBattle = 1;
	WarriorShoutCommanding = 2;
}

message Warrior {
    message Rotation {
			enum Type {
				ArmsSlam = 0;
				ArmsDW = 1;
				Fury = 2;
			}

			Type type = 1;

			message ArmsSlamRotation {
				bool use_slam_during_execute = 1;
				double slam_latency = 2;
				bool use_ms_during_execute = 3;
			}
			ArmsSlamRotation arms_slam = 2;

			message ArmsDWRotation {
				bool use_ms_during_execute = 1;
			}
			ArmsDWRotation arms_dw = 3;

			message FuryRotation {
				enum PrimaryInstant {
					Bloodthirst = 0;
					Whirlwind = 1;
				}
				PrimaryInstant primary_instant = 1;

				bool use_bt_during_execute = 2;
				double rampage_cd_threshold = 10; // only when using rampage
			}
			FuryRotation fury = 4;

			bool use_overpower = 8;
			bool use_hamstring = 10;

			double hs_rage_threshold = 7;
			double overpower_rage_threshold = 9;
			double hamstring_rage_threshold = 11;

			bool use_hs_during_execute = 6;
			bool use_ww_during_execute = 5;
    }
    Rotation rotation = 1;

    WarriorTalents talents = 2;
    
    message Options {
			double starting_rage = 1;
			bool recklessness = 2;

			WarriorShout shout = 3;
			bool precast_shout = 4;
			bool precast_shout_t2 = 5;
			bool precast_shout_sapphire = 6; // Disabled if sapphire is equipped
    }
    Options options = 3;
}

message ProtectionWarrior {
    message Rotation {
			enum DemoShout {
				DemoShoutNone = 0;
				DemoShoutMaintain = 1;
				DemoShoutFiller = 2;
			}
			DemoShout demo_shout = 1;

			enum ThunderClap {
				ThunderClapNone = 0;
				ThunderClapMaintain = 1;
				ThunderClapOnCD = 2;
			}
			ThunderClap thunder_clap = 2;

			// Minimum rage to queue HS or Cleave.
			int32 hs_rage_threshold = 3;
		}
    Rotation rotation = 1;

    WarriorTalents talents = 2;
    
    message Options {
			double starting_rage = 1;

			WarriorShout shout = 4;
			bool precast_shout = 5;
			bool precast_shout_t2 = 2;
			bool precast_shout_sapphire = 3; // Disabled if sapphire is equipped
    }
    Options options = 3;
}
