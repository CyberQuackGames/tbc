package main

import (
	"fmt"
	"os"

	"github.com/wowsims/tbc/sim/core/proto"
	"github.com/wowsims/tbc/sim/core/stats"
)

func specInSlice(a proto.Spec, list []proto.Spec) bool {
	for _, b := range list {
		if b == a {
			return true
		}
	}
	return false
}

func writeItemFile(outDir string, itemDeclarations []ItemDeclaration, itemResponses []WowheadItemResponse) {
	err := os.MkdirAll(outDir, os.ModePerm)
	if err != nil {
		panic(err)
	}

	file, err := os.Create(fmt.Sprintf("%s/all_items.go", outDir))
	if err != nil {
		panic(err)
	}
	defer file.Close()

	file.WriteString(`// DO NOT EDIT. This file is auto-generated by the item generator tool. Use that to make edits.
	
package items
	
import (
	"github.com/wowsims/tbc/sim/core/proto"
	"github.com/wowsims/tbc/sim/core/stats"
)

var Items = []Item{
`)

	for idx, itemDeclaration := range itemDeclarations {
		itemResponse := itemResponses[idx]
		file.WriteString(fmt.Sprintf("\t%s,\n", itemToGoString(itemDeclaration, itemResponse)))
	}

	file.WriteString("}\n")

	file.Sync()
}

func itemToGoString(itemDeclaration ItemDeclaration, itemResponse WowheadItemResponse) string {
	itemStr := "{"

	itemStr += fmt.Sprintf("Name:\"%s\", ", itemResponse.Name)
	itemStr += fmt.Sprintf("ID:%d, ", itemDeclaration.ID)

	itemStr += "Categories: []proto.ItemCategory{"
	for _, category := range itemDeclaration.Categories {
		itemStr += fmt.Sprintf("proto.ItemCategory_%s,", category.String())
	}
	itemStr += "}, "

	classAllowlist := itemResponse.GetClassAllowlist()
	if len(itemDeclaration.ClassAllowlist) > 0 {
		classAllowlist = itemDeclaration.ClassAllowlist
	}
	if len(classAllowlist) > 0 {
		itemStr += "ClassAllowlist: []proto.Class{"
		for _, class := range classAllowlist {
			itemStr += fmt.Sprintf("proto.Class_%s,", class.String())
		}
		itemStr += "}, "
	}

	itemStr += fmt.Sprintf("Type:proto.ItemType_%s, ", itemResponse.GetItemType().String())

	armorType := itemResponse.GetArmorType()
	if armorType != proto.ArmorType_ArmorTypeUnknown {
		itemStr += fmt.Sprintf("ArmorType:proto.ArmorType_%s, ", armorType.String())
	}

	weaponType := itemResponse.GetWeaponType()
	if weaponType != proto.WeaponType_WeaponTypeUnknown {
		itemStr += fmt.Sprintf("WeaponType:proto.WeaponType_%s, ", weaponType.String())

		handType := itemResponse.GetHandType()
		if handType == proto.HandType_HandTypeUnknown {
			panic("Unknown hand type for item: " + itemResponse.Tooltip)
		}
		itemStr += fmt.Sprintf("HandType:proto.HandType_%s, ", handType.String())
	} else {
		rangedWeaponType := itemResponse.GetRangedWeaponType()
		if rangedWeaponType != proto.RangedWeaponType_RangedWeaponTypeUnknown {
			itemStr += fmt.Sprintf("RangedWeaponType:proto.RangedWeaponType_%s, ", rangedWeaponType.String())
		}
	}

	phase := itemDeclaration.Phase
	if phase == 0 {
		phase = itemResponse.GetPhase()
	}
	itemStr += fmt.Sprintf("Phase:%d, ", phase)
	itemStr += fmt.Sprintf("Quality:proto.ItemQuality_%s, ", proto.ItemQuality(itemResponse.Quality).String())

	if itemResponse.GetUnique() {
		itemStr += fmt.Sprintf("Unique:true, ")
	}

	itemStr += fmt.Sprintf("Stats: %s, ", statsToGoString(itemResponse.GetStats()))

	gemSockets := itemResponse.GetGemSockets()
	if len(gemSockets) > 0 {
		itemStr += "GemSockets: []proto.GemColor{"
		for _, gemColor := range gemSockets {
			itemStr += fmt.Sprintf("proto.GemColor_%s,", gemColor.String())
		}
		itemStr += "}, "
	}

	itemStr += fmt.Sprintf("SocketBonus: %s", statsToGoString(itemResponse.GetSocketBonus()))

	itemStr += "}"
	return itemStr
}

func statsToGoString(statlist Stats) string {
	statsStr := "stats.Stats{"

	for stat, value := range statlist {
		if value > 0 {
			statsStr += fmt.Sprintf("stats.%s:%.0f,", stats.Stat(stat).StatName(), value)
		}
	}

	statsStr += "}"
	return statsStr
}
