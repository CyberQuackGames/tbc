import { Consumes } from '/tbc/core/proto/common.js';
import { Enchant } from '/tbc/core/proto/common.js';
import { EquipmentSpec } from '/tbc/core/proto/common.js';
import { Gem } from '/tbc/core/proto/common.js';
import { ItemSlot } from '/tbc/core/proto/common.js';
import { Item } from '/tbc/core/proto/common.js';
import { Race } from '/tbc/core/proto/common.js';
import { Spec } from '/tbc/core/proto/common.js';
import { Stat } from '/tbc/core/proto/common.js';
import { ComputeStatsResult } from '/tbc/core/proto/api.js';
import { StatWeightsRequest, StatWeightsResult } from '/tbc/core/proto/api.js';
import { EquippedItem } from '/tbc/core/proto_utils/equipped_item.js';
import { Gear } from '/tbc/core/proto_utils/gear.js';
import { Stats } from '/tbc/core/proto_utils/stats.js';
import { SpecRotation } from '/tbc/core/proto_utils/utils.js';
import { SpecTalents } from '/tbc/core/proto_utils/utils.js';
import { SpecTypeFunctions } from '/tbc/core/proto_utils/utils.js';
import { SpecOptions } from '/tbc/core/proto_utils/utils.js';
import { TypedEvent } from './typed_event.js';
import { Sim } from './sim.js';
export interface PlayerConfig<SpecType extends Spec> {
    spec: Spec;
    epStats: Array<Stat>;
    epReferenceStat: Stat;
    displayStats: Array<Stat>;
    defaults: {
        gear: EquipmentSpec;
        epWeights: Stats;
        consumes: Consumes;
        rotation: SpecRotation<SpecType>;
        talents: string;
        specOptions: SpecOptions<SpecType>;
    };
    metaGemEffectEP?: ((gem: Gem, player: Player<SpecType>) => number);
}
export declare class Player<SpecType extends Spec> {
    readonly spec: Spec;
    readonly phaseChangeEmitter: TypedEvent<void>;
    readonly consumesChangeEmitter: TypedEvent<void>;
    readonly customStatsChangeEmitter: TypedEvent<void>;
    readonly gearChangeEmitter: TypedEvent<void>;
    readonly raceChangeEmitter: TypedEvent<void>;
    readonly rotationChangeEmitter: TypedEvent<void>;
    readonly talentsChangeEmitter: TypedEvent<void>;
    readonly talentsStringChangeEmitter: TypedEvent<void>;
    readonly specOptionsChangeEmitter: TypedEvent<void>;
    readonly changeEmitter: TypedEvent<void>;
    readonly gearListEmitter: TypedEvent<void>;
    readonly characterStatsEmitter: TypedEvent<void>;
    private _currentStats;
    private _consumes;
    private _customStats;
    private _gear;
    private _race;
    private _rotation;
    private _talents;
    private _talentsString;
    private _specOptions;
    private _epWeights;
    readonly specTypeFunctions: SpecTypeFunctions<SpecType>;
    private readonly _metaGemEffectEP;
    readonly defaultGear: EquipmentSpec;
    readonly sim: Sim;
    constructor(config: PlayerConfig<SpecType>, sim: Sim);
    statWeights(request: StatWeightsRequest): Promise<StatWeightsResult>;
    private updateCharacterStats;
    getCurrentStats(): ComputeStatsResult;
    getRace(): Race;
    setRace(newRace: Race): void;
    getConsumes(): Consumes;
    setConsumes(newConsumes: Consumes): void;
    equipItem(slot: ItemSlot, newItem: EquippedItem | null): void;
    getEquippedItem(slot: ItemSlot): EquippedItem | null;
    getGear(): Gear;
    setGear(newGear: Gear): void;
    getCustomStats(): Stats;
    setCustomStats(newCustomStats: Stats): void;
    getRotation(): SpecRotation<SpecType>;
    setRotation(newRotation: SpecRotation<SpecType>): void;
    getTalents(): SpecTalents<SpecType>;
    setTalents(newTalents: SpecTalents<SpecType>): void;
    getTalentsString(): string;
    setTalentsString(newTalentsString: string): void;
    getSpecOptions(): SpecOptions<SpecType>;
    setSpecOptions(newSpecOptions: SpecOptions<SpecType>): void;
    computeGemEP(gem: Gem): number;
    computeEnchantEP(enchant: Enchant): number;
    computeItemEP(item: Item): number;
    setWowheadData(equippedItem: EquippedItem, elem: HTMLElement): void;
    toJson(): Object;
    fromJson(obj: any): void;
}
