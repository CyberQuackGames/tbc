// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: newapi.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RaceBonusType int32

const (
	RaceBonusType_none     RaceBonusType = 0
	RaceBonusType_bloodelf RaceBonusType = 1
	RaceBonusType_draenei  RaceBonusType = 2
	RaceBonusType_dwarf    RaceBonusType = 3
	RaceBonusType_gnome    RaceBonusType = 4
	RaceBonusType_human    RaceBonusType = 5
	RaceBonusType_nightelf RaceBonusType = 6
	RaceBonusType_orc      RaceBonusType = 7
	RaceBonusType_tauren   RaceBonusType = 8
	RaceBonusType_troll10  RaceBonusType = 9
	RaceBonusType_troll30  RaceBonusType = 10
	RaceBonusType_undead   RaceBonusType = 11
)

// Enum value maps for RaceBonusType.
var (
	RaceBonusType_name = map[int32]string{
		0:  "none",
		1:  "bloodelf",
		2:  "draenei",
		3:  "dwarf",
		4:  "gnome",
		5:  "human",
		6:  "nightelf",
		7:  "orc",
		8:  "tauren",
		9:  "troll10",
		10: "troll30",
		11: "undead",
	}
	RaceBonusType_value = map[string]int32{
		"none":     0,
		"bloodelf": 1,
		"draenei":  2,
		"dwarf":    3,
		"gnome":    4,
		"human":    5,
		"nightelf": 6,
		"orc":      7,
		"tauren":   8,
		"troll10":  9,
		"troll30":  10,
		"undead":   11,
	}
)

func (x RaceBonusType) Enum() *RaceBonusType {
	p := new(RaceBonusType)
	*p = x
	return p
}

func (x RaceBonusType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RaceBonusType) Descriptor() protoreflect.EnumDescriptor {
	return file_newapi_proto_enumTypes[0].Descriptor()
}

func (RaceBonusType) Type() protoreflect.EnumType {
	return &file_newapi_proto_enumTypes[0]
}

func (x RaceBonusType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RaceBonusType.Descriptor instead.
func (RaceBonusType) EnumDescriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{0}
}

type Stat int32

const (
	Stat_strength           Stat = 0
	Stat_agility            Stat = 1
	Stat_stamina            Stat = 2
	Stat_intellect          Stat = 3
	Stat_spirit             Stat = 4
	Stat_spell_crit         Stat = 5
	Stat_spell_hit          Stat = 6
	Stat_healing            Stat = 7
	Stat_spell_power        Stat = 8
	Stat_spell_haste        Stat = 9
	Stat_mp5                Stat = 10
	Stat_spellpen           Stat = 11
	Stat_fire_spell_power   Stat = 12
	Stat_nature_spell_power Stat = 13
	Stat_frost_spell_power  Stat = 14
	Stat_shadow_spell_power Stat = 15
	Stat_holy_spell_power   Stat = 16
	Stat_arcane_spell_power Stat = 17
	Stat_attack_power       Stat = 18
	Stat_melee_hit          Stat = 19
	Stat_melee_haste        Stat = 20
	Stat_melee_crit         Stat = 21
	Stat_expertise          Stat = 22
	Stat_armor_penetration  Stat = 23
	Stat_mana               Stat = 24
	Stat_energy             Stat = 25
	Stat_rage               Stat = 26
	Stat_armor              Stat = 27
)

// Enum value maps for Stat.
var (
	Stat_name = map[int32]string{
		0:  "strength",
		1:  "agility",
		2:  "stamina",
		3:  "intellect",
		4:  "spirit",
		5:  "spell_crit",
		6:  "spell_hit",
		7:  "healing",
		8:  "spell_power",
		9:  "spell_haste",
		10: "mp5",
		11: "spellpen",
		12: "fire_spell_power",
		13: "nature_spell_power",
		14: "frost_spell_power",
		15: "shadow_spell_power",
		16: "holy_spell_power",
		17: "arcane_spell_power",
		18: "attack_power",
		19: "melee_hit",
		20: "melee_haste",
		21: "melee_crit",
		22: "expertise",
		23: "armor_penetration",
		24: "mana",
		25: "energy",
		26: "rage",
		27: "armor",
	}
	Stat_value = map[string]int32{
		"strength":           0,
		"agility":            1,
		"stamina":            2,
		"intellect":          3,
		"spirit":             4,
		"spell_crit":         5,
		"spell_hit":          6,
		"healing":            7,
		"spell_power":        8,
		"spell_haste":        9,
		"mp5":                10,
		"spellpen":           11,
		"fire_spell_power":   12,
		"nature_spell_power": 13,
		"frost_spell_power":  14,
		"shadow_spell_power": 15,
		"holy_spell_power":   16,
		"arcane_spell_power": 17,
		"attack_power":       18,
		"melee_hit":          19,
		"melee_haste":        20,
		"melee_crit":         21,
		"expertise":          22,
		"armor_penetration":  23,
		"mana":               24,
		"energy":             25,
		"rage":               26,
		"armor":              27,
	}
)

func (x Stat) Enum() *Stat {
	p := new(Stat)
	*p = x
	return p
}

func (x Stat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stat) Descriptor() protoreflect.EnumDescriptor {
	return file_newapi_proto_enumTypes[1].Descriptor()
}

func (Stat) Type() protoreflect.EnumType {
	return &file_newapi_proto_enumTypes[1]
}

func (x Stat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stat.Descriptor instead.
func (Stat) EnumDescriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{1}
}

type ItemQuality int32

const (
	ItemQuality_junk      ItemQuality = 0
	ItemQuality_uncommon  ItemQuality = 1
	ItemQuality_rare      ItemQuality = 2
	ItemQuality_epic      ItemQuality = 3
	ItemQuality_legendary ItemQuality = 4
)

// Enum value maps for ItemQuality.
var (
	ItemQuality_name = map[int32]string{
		0: "junk",
		1: "uncommon",
		2: "rare",
		3: "epic",
		4: "legendary",
	}
	ItemQuality_value = map[string]int32{
		"junk":      0,
		"uncommon":  1,
		"rare":      2,
		"epic":      3,
		"legendary": 4,
	}
)

func (x ItemQuality) Enum() *ItemQuality {
	p := new(ItemQuality)
	*p = x
	return p
}

func (x ItemQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_newapi_proto_enumTypes[2].Descriptor()
}

func (ItemQuality) Type() protoreflect.EnumType {
	return &file_newapi_proto_enumTypes[2]
}

func (x ItemQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemQuality.Descriptor instead.
func (ItemQuality) EnumDescriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{2}
}

type GemColor int32

const (
	GemColor_unknown_color GemColor = 0
	GemColor_meta          GemColor = 1
	GemColor_red           GemColor = 2
	GemColor_blue          GemColor = 3
	GemColor_yellow        GemColor = 4
	GemColor_green         GemColor = 5
	GemColor_orange        GemColor = 6
	GemColor_purple        GemColor = 7
	GemColor_prismatic     GemColor = 8
)

// Enum value maps for GemColor.
var (
	GemColor_name = map[int32]string{
		0: "unknown_color",
		1: "meta",
		2: "red",
		3: "blue",
		4: "yellow",
		5: "green",
		6: "orange",
		7: "purple",
		8: "prismatic",
	}
	GemColor_value = map[string]int32{
		"unknown_color": 0,
		"meta":          1,
		"red":           2,
		"blue":          3,
		"yellow":        4,
		"green":         5,
		"orange":        6,
		"purple":        7,
		"prismatic":     8,
	}
)

func (x GemColor) Enum() *GemColor {
	p := new(GemColor)
	*p = x
	return p
}

func (x GemColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GemColor) Descriptor() protoreflect.EnumDescriptor {
	return file_newapi_proto_enumTypes[3].Descriptor()
}

func (GemColor) Type() protoreflect.EnumType {
	return &file_newapi_proto_enumTypes[3]
}

func (x GemColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GemColor.Descriptor instead.
func (GemColor) EnumDescriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{3}
}

// RPC GearList
type Spec int32

const (
	Spec_elemental_shaman Spec = 0
)

// Enum value maps for Spec.
var (
	Spec_name = map[int32]string{
		0: "elemental_shaman",
	}
	Spec_value = map[string]int32{
		"elemental_shaman": 0,
	}
)

func (x Spec) Enum() *Spec {
	p := new(Spec)
	*p = x
	return p
}

func (x Spec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Spec) Descriptor() protoreflect.EnumDescriptor {
	return file_newapi_proto_enumTypes[4].Descriptor()
}

func (Spec) Type() protoreflect.EnumType {
	return &file_newapi_proto_enumTypes[4]
}

func (x Spec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Spec.Descriptor instead.
func (Spec) EnumDescriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{4}
}

type Shaman_AgentType int32

const (
	Shaman_unknown_agent   Shaman_AgentType = 0
	Shaman_fixed_lb_cl     Shaman_AgentType = 1
	Shaman_cl_on_clearcast Shaman_AgentType = 2
	Shaman_adaptive        Shaman_AgentType = 3
	Shaman_enhancer        Shaman_AgentType = 4
)

// Enum value maps for Shaman_AgentType.
var (
	Shaman_AgentType_name = map[int32]string{
		0: "unknown_agent",
		1: "fixed_lb_cl",
		2: "cl_on_clearcast",
		3: "adaptive",
		4: "enhancer",
	}
	Shaman_AgentType_value = map[string]int32{
		"unknown_agent":   0,
		"fixed_lb_cl":     1,
		"cl_on_clearcast": 2,
		"adaptive":        3,
		"enhancer":        4,
	}
)

func (x Shaman_AgentType) Enum() *Shaman_AgentType {
	p := new(Shaman_AgentType)
	*p = x
	return p
}

func (x Shaman_AgentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Shaman_AgentType) Descriptor() protoreflect.EnumDescriptor {
	return file_newapi_proto_enumTypes[5].Descriptor()
}

func (Shaman_AgentType) Type() protoreflect.EnumType {
	return &file_newapi_proto_enumTypes[5]
}

func (x Shaman_AgentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Shaman_AgentType.Descriptor instead.
func (Shaman_AgentType) EnumDescriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{9, 0}
}

type Buffs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raid buffs
	ArcaneInt                bool `protobuf:"varint,1,opt,name=arcane_int,json=arcaneInt,proto3" json:"arcane_int,omitempty"`
	GiftOfTheWild            bool `protobuf:"varint,2,opt,name=gift_of_the_wild,json=giftOfTheWild,proto3" json:"gift_of_the_wild,omitempty"`
	BlessingOfKings          bool `protobuf:"varint,3,opt,name=blessing_of_kings,json=blessingOfKings,proto3" json:"blessing_of_kings,omitempty"`
	ImprovedBlessingOfWisdom bool `protobuf:"varint,4,opt,name=improved_blessing_of_wisdom,json=improvedBlessingOfWisdom,proto3" json:"improved_blessing_of_wisdom,omitempty"`
	ImprovedDivineSpirit     bool `protobuf:"varint,5,opt,name=improved_divine_spirit,json=improvedDivineSpirit,proto3" json:"improved_divine_spirit,omitempty"`
	// Party Buffs
	Moonkin             bool  `protobuf:"varint,6,opt,name=moonkin,proto3" json:"moonkin,omitempty"`
	MoonkinRavenGoddess bool  `protobuf:"varint,7,opt,name=moonkin_raven_goddess,json=moonkinRavenGoddess,proto3" json:"moonkin_raven_goddess,omitempty"`
	SpriestDps          int32 `protobuf:"varint,8,opt,name=spriest_dps,json=spriestDps,proto3" json:"spriest_dps,omitempty"`
	Bloodlust           int32 `protobuf:"varint,9,opt,name=bloodlust,proto3" json:"bloodlust,omitempty"`
	// Party Totems
	WrathOfAir   bool  `protobuf:"varint,10,opt,name=wrath_of_air,json=wrathOfAir,proto3" json:"wrath_of_air,omitempty"`
	TotemOfWrath int32 `protobuf:"varint,11,opt,name=totem_of_wrath,json=totemOfWrath,proto3" json:"totem_of_wrath,omitempty"`
	ManaStream   bool  `protobuf:"varint,12,opt,name=mana_stream,json=manaStream,proto3" json:"mana_stream,omitempty"`
	// Target Debuff
	JudgementOfWisdom         bool `protobuf:"varint,13,opt,name=judgement_of_wisdom,json=judgementOfWisdom,proto3" json:"judgement_of_wisdom,omitempty"`
	ImprovedSealOfTheCrusader bool `protobuf:"varint,14,opt,name=improved_seal_of_the_crusader,json=improvedSealOfTheCrusader,proto3" json:"improved_seal_of_the_crusader,omitempty"`
	Misery                    bool `protobuf:"varint,15,opt,name=misery,proto3" json:"misery,omitempty"`
	// Item Buffs
	EyeOfTheNight         bool `protobuf:"varint,16,opt,name=eye_of_the_night,json=eyeOfTheNight,proto3" json:"eye_of_the_night,omitempty"`
	ChainOfTheTwilightOwl bool `protobuf:"varint,17,opt,name=chain_of_the_twilight_owl,json=chainOfTheTwilightOwl,proto3" json:"chain_of_the_twilight_owl,omitempty"`
}

func (x *Buffs) Reset() {
	*x = Buffs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buffs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buffs) ProtoMessage() {}

func (x *Buffs) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buffs.ProtoReflect.Descriptor instead.
func (*Buffs) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{0}
}

func (x *Buffs) GetArcaneInt() bool {
	if x != nil {
		return x.ArcaneInt
	}
	return false
}

func (x *Buffs) GetGiftOfTheWild() bool {
	if x != nil {
		return x.GiftOfTheWild
	}
	return false
}

func (x *Buffs) GetBlessingOfKings() bool {
	if x != nil {
		return x.BlessingOfKings
	}
	return false
}

func (x *Buffs) GetImprovedBlessingOfWisdom() bool {
	if x != nil {
		return x.ImprovedBlessingOfWisdom
	}
	return false
}

func (x *Buffs) GetImprovedDivineSpirit() bool {
	if x != nil {
		return x.ImprovedDivineSpirit
	}
	return false
}

func (x *Buffs) GetMoonkin() bool {
	if x != nil {
		return x.Moonkin
	}
	return false
}

func (x *Buffs) GetMoonkinRavenGoddess() bool {
	if x != nil {
		return x.MoonkinRavenGoddess
	}
	return false
}

func (x *Buffs) GetSpriestDps() int32 {
	if x != nil {
		return x.SpriestDps
	}
	return 0
}

func (x *Buffs) GetBloodlust() int32 {
	if x != nil {
		return x.Bloodlust
	}
	return 0
}

func (x *Buffs) GetWrathOfAir() bool {
	if x != nil {
		return x.WrathOfAir
	}
	return false
}

func (x *Buffs) GetTotemOfWrath() int32 {
	if x != nil {
		return x.TotemOfWrath
	}
	return 0
}

func (x *Buffs) GetManaStream() bool {
	if x != nil {
		return x.ManaStream
	}
	return false
}

func (x *Buffs) GetJudgementOfWisdom() bool {
	if x != nil {
		return x.JudgementOfWisdom
	}
	return false
}

func (x *Buffs) GetImprovedSealOfTheCrusader() bool {
	if x != nil {
		return x.ImprovedSealOfTheCrusader
	}
	return false
}

func (x *Buffs) GetMisery() bool {
	if x != nil {
		return x.Misery
	}
	return false
}

func (x *Buffs) GetEyeOfTheNight() bool {
	if x != nil {
		return x.EyeOfTheNight
	}
	return false
}

func (x *Buffs) GetChainOfTheTwilightOwl() bool {
	if x != nil {
		return x.ChainOfTheTwilightOwl
	}
	return false
}

type Consumes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BrilliantWizardOil       bool `protobuf:"varint,1,opt,name=brilliant_wizard_oil,json=brilliantWizardOil,proto3" json:"brilliant_wizard_oil,omitempty"`
	MajorMageblood           bool `protobuf:"varint,2,opt,name=major_mageblood,json=majorMageblood,proto3" json:"major_mageblood,omitempty"`
	FlaskOfBlindingLight     bool `protobuf:"varint,3,opt,name=flask_of_blinding_light,json=flaskOfBlindingLight,proto3" json:"flask_of_blinding_light,omitempty"`
	FlaskOfMightyRestoration bool `protobuf:"varint,4,opt,name=flask_of_mighty_restoration,json=flaskOfMightyRestoration,proto3" json:"flask_of_mighty_restoration,omitempty"`
	BlackendBasilisk         bool `protobuf:"varint,5,opt,name=blackend_basilisk,json=blackendBasilisk,proto3" json:"blackend_basilisk,omitempty"`
	DestructionPotion        bool `protobuf:"varint,6,opt,name=destruction_potion,json=destructionPotion,proto3" json:"destruction_potion,omitempty"`
	SuperManaPotion          bool `protobuf:"varint,7,opt,name=super_mana_potion,json=superManaPotion,proto3" json:"super_mana_potion,omitempty"`
	DarkRune                 bool `protobuf:"varint,8,opt,name=dark_rune,json=darkRune,proto3" json:"dark_rune,omitempty"`
	DrumsOfBattle            bool `protobuf:"varint,9,opt,name=drums_of_battle,json=drumsOfBattle,proto3" json:"drums_of_battle,omitempty"`
}

func (x *Consumes) Reset() {
	*x = Consumes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumes) ProtoMessage() {}

func (x *Consumes) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumes.ProtoReflect.Descriptor instead.
func (*Consumes) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{1}
}

func (x *Consumes) GetBrilliantWizardOil() bool {
	if x != nil {
		return x.BrilliantWizardOil
	}
	return false
}

func (x *Consumes) GetMajorMageblood() bool {
	if x != nil {
		return x.MajorMageblood
	}
	return false
}

func (x *Consumes) GetFlaskOfBlindingLight() bool {
	if x != nil {
		return x.FlaskOfBlindingLight
	}
	return false
}

func (x *Consumes) GetFlaskOfMightyRestoration() bool {
	if x != nil {
		return x.FlaskOfMightyRestoration
	}
	return false
}

func (x *Consumes) GetBlackendBasilisk() bool {
	if x != nil {
		return x.BlackendBasilisk
	}
	return false
}

func (x *Consumes) GetDestructionPotion() bool {
	if x != nil {
		return x.DestructionPotion
	}
	return false
}

func (x *Consumes) GetSuperManaPotion() bool {
	if x != nil {
		return x.SuperManaPotion
	}
	return false
}

func (x *Consumes) GetDarkRune() bool {
	if x != nil {
		return x.DarkRune
	}
	return false
}

func (x *Consumes) GetDrumsOfBattle() bool {
	if x != nil {
		return x.DrumsOfBattle
	}
	return false
}

type PlayerOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Race RaceBonusType `protobuf:"varint,1,opt,name=race,proto3,enum=newapi.RaceBonusType" json:"race,omitempty"`
	// Types that are assignable to Class:
	//	*PlayerOptions_Druid
	//	*PlayerOptions_Hunter
	//	*PlayerOptions_Mage
	//	*PlayerOptions_Paladin
	//	*PlayerOptions_Priest
	//	*PlayerOptions_Rogue
	//	*PlayerOptions_Shaman
	//	*PlayerOptions_Warlock
	//	*PlayerOptions_Warrior
	Class    isPlayerOptions_Class `protobuf_oneof:"class"`
	Consumes *Consumes             `protobuf:"bytes,11,opt,name=consumes,proto3" json:"consumes,omitempty"` // What consumes this player is going to be using.
}

func (x *PlayerOptions) Reset() {
	*x = PlayerOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlayerOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlayerOptions) ProtoMessage() {}

func (x *PlayerOptions) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlayerOptions.ProtoReflect.Descriptor instead.
func (*PlayerOptions) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{2}
}

func (x *PlayerOptions) GetRace() RaceBonusType {
	if x != nil {
		return x.Race
	}
	return RaceBonusType_none
}

func (m *PlayerOptions) GetClass() isPlayerOptions_Class {
	if m != nil {
		return m.Class
	}
	return nil
}

func (x *PlayerOptions) GetDruid() *Druid {
	if x, ok := x.GetClass().(*PlayerOptions_Druid); ok {
		return x.Druid
	}
	return nil
}

func (x *PlayerOptions) GetHunter() *Hunter {
	if x, ok := x.GetClass().(*PlayerOptions_Hunter); ok {
		return x.Hunter
	}
	return nil
}

func (x *PlayerOptions) GetMage() *Mage {
	if x, ok := x.GetClass().(*PlayerOptions_Mage); ok {
		return x.Mage
	}
	return nil
}

func (x *PlayerOptions) GetPaladin() *Paladin {
	if x, ok := x.GetClass().(*PlayerOptions_Paladin); ok {
		return x.Paladin
	}
	return nil
}

func (x *PlayerOptions) GetPriest() *Priest {
	if x, ok := x.GetClass().(*PlayerOptions_Priest); ok {
		return x.Priest
	}
	return nil
}

func (x *PlayerOptions) GetRogue() *Rogue {
	if x, ok := x.GetClass().(*PlayerOptions_Rogue); ok {
		return x.Rogue
	}
	return nil
}

func (x *PlayerOptions) GetShaman() *Shaman {
	if x, ok := x.GetClass().(*PlayerOptions_Shaman); ok {
		return x.Shaman
	}
	return nil
}

func (x *PlayerOptions) GetWarlock() *Warlock {
	if x, ok := x.GetClass().(*PlayerOptions_Warlock); ok {
		return x.Warlock
	}
	return nil
}

func (x *PlayerOptions) GetWarrior() *Warrior {
	if x, ok := x.GetClass().(*PlayerOptions_Warrior); ok {
		return x.Warrior
	}
	return nil
}

func (x *PlayerOptions) GetConsumes() *Consumes {
	if x != nil {
		return x.Consumes
	}
	return nil
}

type isPlayerOptions_Class interface {
	isPlayerOptions_Class()
}

type PlayerOptions_Druid struct {
	Druid *Druid `protobuf:"bytes,2,opt,name=druid,proto3,oneof"`
}

type PlayerOptions_Hunter struct {
	Hunter *Hunter `protobuf:"bytes,3,opt,name=hunter,proto3,oneof"`
}

type PlayerOptions_Mage struct {
	Mage *Mage `protobuf:"bytes,4,opt,name=mage,proto3,oneof"`
}

type PlayerOptions_Paladin struct {
	Paladin *Paladin `protobuf:"bytes,5,opt,name=paladin,proto3,oneof"`
}

type PlayerOptions_Priest struct {
	Priest *Priest `protobuf:"bytes,6,opt,name=priest,proto3,oneof"`
}

type PlayerOptions_Rogue struct {
	Rogue *Rogue `protobuf:"bytes,7,opt,name=rogue,proto3,oneof"`
}

type PlayerOptions_Shaman struct {
	Shaman *Shaman `protobuf:"bytes,8,opt,name=shaman,proto3,oneof"`
}

type PlayerOptions_Warlock struct {
	Warlock *Warlock `protobuf:"bytes,9,opt,name=warlock,proto3,oneof"`
}

type PlayerOptions_Warrior struct {
	Warrior *Warrior `protobuf:"bytes,10,opt,name=warrior,proto3,oneof"`
}

func (*PlayerOptions_Druid) isPlayerOptions_Class() {}

func (*PlayerOptions_Hunter) isPlayerOptions_Class() {}

func (*PlayerOptions_Mage) isPlayerOptions_Class() {}

func (*PlayerOptions_Paladin) isPlayerOptions_Class() {}

func (*PlayerOptions_Priest) isPlayerOptions_Class() {}

func (*PlayerOptions_Rogue) isPlayerOptions_Class() {}

func (*PlayerOptions_Shaman) isPlayerOptions_Class() {}

func (*PlayerOptions_Warlock) isPlayerOptions_Class() {}

func (*PlayerOptions_Warrior) isPlayerOptions_Class() {}

type Druid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Druid) Reset() {
	*x = Druid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Druid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Druid) ProtoMessage() {}

func (x *Druid) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Druid.ProtoReflect.Descriptor instead.
func (*Druid) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{3}
}

type Hunter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Hunter) Reset() {
	*x = Hunter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hunter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hunter) ProtoMessage() {}

func (x *Hunter) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hunter.ProtoReflect.Descriptor instead.
func (*Hunter) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{4}
}

type Mage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Mage) Reset() {
	*x = Mage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Mage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Mage) ProtoMessage() {}

func (x *Mage) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Mage.ProtoReflect.Descriptor instead.
func (*Mage) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{5}
}

type Paladin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Paladin) Reset() {
	*x = Paladin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Paladin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Paladin) ProtoMessage() {}

func (x *Paladin) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Paladin.ProtoReflect.Descriptor instead.
func (*Paladin) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{6}
}

type Priest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Priest) Reset() {
	*x = Priest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Priest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Priest) ProtoMessage() {}

func (x *Priest) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Priest.ProtoReflect.Descriptor instead.
func (*Priest) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{7}
}

type Rogue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Rogue) Reset() {
	*x = Rogue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rogue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rogue) ProtoMessage() {}

func (x *Rogue) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rogue.ProtoReflect.Descriptor instead.
func (*Rogue) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{8}
}

type Shaman struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AgentType    Shaman_AgentType   `protobuf:"varint,1,opt,name=agentType,proto3,enum=newapi.Shaman_AgentType" json:"agentType,omitempty"`
	Spec         *Shaman_ShamanSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	WaterShield  bool               `protobuf:"varint,3,opt,name=water_shield,json=waterShield,proto3" json:"water_shield,omitempty"` // int32 WaterShieldPPM
	AgentOptions map[string]string  `protobuf:"bytes,4,rep,name=AgentOptions,proto3" json:"AgentOptions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Shaman) Reset() {
	*x = Shaman{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shaman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shaman) ProtoMessage() {}

func (x *Shaman) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shaman.ProtoReflect.Descriptor instead.
func (*Shaman) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{9}
}

func (x *Shaman) GetAgentType() Shaman_AgentType {
	if x != nil {
		return x.AgentType
	}
	return Shaman_unknown_agent
}

func (x *Shaman) GetSpec() *Shaman_ShamanSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Shaman) GetWaterShield() bool {
	if x != nil {
		return x.WaterShield
	}
	return false
}

func (x *Shaman) GetAgentOptions() map[string]string {
	if x != nil {
		return x.AgentOptions
	}
	return nil
}

type Warlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Warlock) Reset() {
	*x = Warlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warlock) ProtoMessage() {}

func (x *Warlock) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warlock.ProtoReflect.Descriptor instead.
func (*Warlock) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{10}
}

type Warrior struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Warrior) Reset() {
	*x = Warrior{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warrior) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warrior) ProtoMessage() {}

func (x *Warrior) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warrior.ProtoReflect.Descriptor instead.
func (*Warrior) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{11}
}

type ItemSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Enchant int32   `protobuf:"varint,3,opt,name=enchant,proto3" json:"enchant,omitempty"`
	Gems    []int32 `protobuf:"varint,4,rep,packed,name=gems,proto3" json:"gems,omitempty"`
}

func (x *ItemSpec) Reset() {
	*x = ItemSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemSpec) ProtoMessage() {}

func (x *ItemSpec) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemSpec.ProtoReflect.Descriptor instead.
func (*ItemSpec) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{12}
}

func (x *ItemSpec) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemSpec) GetEnchant() int32 {
	if x != nil {
		return x.Enchant
	}
	return 0
}

func (x *ItemSpec) GetGems() []int32 {
	if x != nil {
		return x.Gems
	}
	return nil
}

type EquipmentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ItemSpec `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EquipmentSpec) Reset() {
	*x = EquipmentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentSpec) ProtoMessage() {}

func (x *EquipmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentSpec.ProtoReflect.Descriptor instead.
func (*EquipmentSpec) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{13}
}

func (x *EquipmentSpec) GetItems() []*ItemSpec {
	if x != nil {
		return x.Items
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options     *PlayerOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	Equipment   *EquipmentSpec `protobuf:"bytes,2,opt,name=equipment,proto3" json:"equipment,omitempty"`
	CustomStats []float64      `protobuf:"fixed64,3,rep,packed,name=custom_stats,json=customStats,proto3" json:"custom_stats,omitempty"`
}

func (x *Player) Reset() {
	*x = Player{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{14}
}

func (x *Player) GetOptions() *PlayerOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *Player) GetEquipment() *EquipmentSpec {
	if x != nil {
		return x.Equipment
	}
	return nil
}

func (x *Player) GetCustomStats() []float64 {
	if x != nil {
		return x.CustomStats
	}
	return nil
}

type Party struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Players []*Player `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
}

func (x *Party) Reset() {
	*x = Party{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Party) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Party) ProtoMessage() {}

func (x *Party) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Party.ProtoReflect.Descriptor instead.
func (*Party) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{15}
}

func (x *Party) GetPlayers() []*Player {
	if x != nil {
		return x.Players
	}
	return nil
}

type Raid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parties []*Party `protobuf:"bytes,1,rep,name=parties,proto3" json:"parties,omitempty"`
}

func (x *Raid) Reset() {
	*x = Raid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Raid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Raid) ProtoMessage() {}

func (x *Raid) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Raid.ProtoReflect.Descriptor instead.
func (*Raid) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{16}
}

func (x *Raid) GetParties() []*Party {
	if x != nil {
		return x.Parties
	}
	return nil
}

type Encounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetArmor int32   `protobuf:"varint,1,opt,name=target_armor,json=targetArmor,proto3" json:"target_armor,omitempty"`
	Duration    float64 `protobuf:"fixed64,2,opt,name=duration,proto3" json:"duration,omitempty"`
	NumTargets  int32   `protobuf:"varint,3,opt,name=num_targets,json=numTargets,proto3" json:"num_targets,omitempty"`
}

func (x *Encounter) Reset() {
	*x = Encounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter) ProtoMessage() {}

func (x *Encounter) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter.ProtoReflect.Descriptor instead.
func (*Encounter) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{17}
}

func (x *Encounter) GetTargetArmor() int32 {
	if x != nil {
		return x.TargetArmor
	}
	return 0
}

func (x *Encounter) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Encounter) GetNumTargets() int32 {
	if x != nil {
		return x.NumTargets
	}
	return 0
}

// RPC IndividualSim
type IndividualSimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player     *Player    `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Buffs      *Buffs     `protobuf:"bytes,2,opt,name=buffs,proto3" json:"buffs,omitempty"`
	Encounter  *Encounter `protobuf:"bytes,3,opt,name=encounter,proto3" json:"encounter,omitempty"`
	Iterations int32      `protobuf:"varint,4,opt,name=iterations,proto3" json:"iterations,omitempty"`
	RandomSeed int64      `protobuf:"varint,5,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	GcdMin     float64    `protobuf:"fixed64,6,opt,name=gcd_min,json=gcdMin,proto3" json:"gcd_min,omitempty"` // sets the minimum GCD
	Debug      bool       `protobuf:"varint,7,opt,name=debug,proto3" json:"debug,omitempty"`                  // enables debug logging.
	ExitOnOom  bool       `protobuf:"varint,8,opt,name=exit_on_oom,json=exitOnOom,proto3" json:"exit_on_oom,omitempty"`
}

func (x *IndividualSimRequest) Reset() {
	*x = IndividualSimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndividualSimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndividualSimRequest) ProtoMessage() {}

func (x *IndividualSimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndividualSimRequest.ProtoReflect.Descriptor instead.
func (*IndividualSimRequest) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{18}
}

func (x *IndividualSimRequest) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *IndividualSimRequest) GetBuffs() *Buffs {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *IndividualSimRequest) GetEncounter() *Encounter {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *IndividualSimRequest) GetIterations() int32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *IndividualSimRequest) GetRandomSeed() int64 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

func (x *IndividualSimRequest) GetGcdMin() float64 {
	if x != nil {
		return x.GcdMin
	}
	return 0
}

func (x *IndividualSimRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

func (x *IndividualSimRequest) GetExitOnOom() bool {
	if x != nil {
		return x.ExitOnOom
	}
	return false
}

type IndividualSimResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExecutionDurationMs int64                 `protobuf:"varint,1,opt,name=execution_duration_ms,json=executionDurationMs,proto3" json:"execution_duration_ms,omitempty"`
	Logs                string                `protobuf:"bytes,2,opt,name=logs,proto3" json:"logs,omitempty"`
	DpsAvg              float64               `protobuf:"fixed64,3,opt,name=dps_avg,json=dpsAvg,proto3" json:"dps_avg,omitempty"`
	DpsStdev            float64               `protobuf:"fixed64,4,opt,name=dps_stdev,json=dpsStdev,proto3" json:"dps_stdev,omitempty"`
	DpsMax              float64               `protobuf:"fixed64,5,opt,name=dps_max,json=dpsMax,proto3" json:"dps_max,omitempty"`
	DpsHist             map[int32]int32       `protobuf:"bytes,6,rep,name=dps_hist,json=dpsHist,proto3" json:"dps_hist,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	NumOom              int32                 `protobuf:"varint,7,opt,name=num_oom,json=numOom,proto3" json:"num_oom,omitempty"`
	OomAtAvg            float64               `protobuf:"fixed64,8,opt,name=oom_at_avg,json=oomAtAvg,proto3" json:"oom_at_avg,omitempty"`
	DpsAtOomAvg         float64               `protobuf:"fixed64,9,opt,name=dps_at_oom_avg,json=dpsAtOomAvg,proto3" json:"dps_at_oom_avg,omitempty"`
	Casts               map[int32]*CastMetric `protobuf:"bytes,10,rep,name=casts,proto3" json:"casts,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Error               string                `protobuf:"bytes,11,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *IndividualSimResult) Reset() {
	*x = IndividualSimResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndividualSimResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndividualSimResult) ProtoMessage() {}

func (x *IndividualSimResult) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndividualSimResult.ProtoReflect.Descriptor instead.
func (*IndividualSimResult) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{19}
}

func (x *IndividualSimResult) GetExecutionDurationMs() int64 {
	if x != nil {
		return x.ExecutionDurationMs
	}
	return 0
}

func (x *IndividualSimResult) GetLogs() string {
	if x != nil {
		return x.Logs
	}
	return ""
}

func (x *IndividualSimResult) GetDpsAvg() float64 {
	if x != nil {
		return x.DpsAvg
	}
	return 0
}

func (x *IndividualSimResult) GetDpsStdev() float64 {
	if x != nil {
		return x.DpsStdev
	}
	return 0
}

func (x *IndividualSimResult) GetDpsMax() float64 {
	if x != nil {
		return x.DpsMax
	}
	return 0
}

func (x *IndividualSimResult) GetDpsHist() map[int32]int32 {
	if x != nil {
		return x.DpsHist
	}
	return nil
}

func (x *IndividualSimResult) GetNumOom() int32 {
	if x != nil {
		return x.NumOom
	}
	return 0
}

func (x *IndividualSimResult) GetOomAtAvg() float64 {
	if x != nil {
		return x.OomAtAvg
	}
	return 0
}

func (x *IndividualSimResult) GetDpsAtOomAvg() float64 {
	if x != nil {
		return x.DpsAtOomAvg
	}
	return 0
}

func (x *IndividualSimResult) GetCasts() map[int32]*CastMetric {
	if x != nil {
		return x.Casts
	}
	return nil
}

func (x *IndividualSimResult) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// CastMetric holds a collection of counts of casts and
//
type CastMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Counts []int32   `protobuf:"varint,1,rep,packed,name=counts,proto3" json:"counts,omitempty"`
	Dmgs   []float64 `protobuf:"fixed64,2,rep,packed,name=dmgs,proto3" json:"dmgs,omitempty"`
	Tags   []int32   `protobuf:"varint,3,rep,packed,name=tags,proto3" json:"tags,omitempty"`
}

func (x *CastMetric) Reset() {
	*x = CastMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CastMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CastMetric) ProtoMessage() {}

func (x *CastMetric) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CastMetric.ProtoReflect.Descriptor instead.
func (*CastMetric) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{20}
}

func (x *CastMetric) GetCounts() []int32 {
	if x != nil {
		return x.Counts
	}
	return nil
}

func (x *CastMetric) GetDmgs() []float64 {
	if x != nil {
		return x.Dmgs
	}
	return nil
}

func (x *CastMetric) GetTags() []int32 {
	if x != nil {
		return x.Tags
	}
	return nil
}

// RPC RaidSim
type RaidSimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Raid       *Raid      `protobuf:"bytes,1,opt,name=raid,proto3" json:"raid,omitempty"`
	Encounter  *Encounter `protobuf:"bytes,2,opt,name=encounter,proto3" json:"encounter,omitempty"`
	RandomSeed int64      `protobuf:"varint,3,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	GcdMin     float64    `protobuf:"fixed64,4,opt,name=gcd_min,json=gcdMin,proto3" json:"gcd_min,omitempty"` // sets the minimum GCD
	Debug      bool       `protobuf:"varint,5,opt,name=debug,proto3" json:"debug,omitempty"`                  // enables debug printing.
}

func (x *RaidSimRequest) Reset() {
	*x = RaidSimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaidSimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaidSimRequest) ProtoMessage() {}

func (x *RaidSimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaidSimRequest.ProtoReflect.Descriptor instead.
func (*RaidSimRequest) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{21}
}

func (x *RaidSimRequest) GetRaid() *Raid {
	if x != nil {
		return x.Raid
	}
	return nil
}

func (x *RaidSimRequest) GetEncounter() *Encounter {
	if x != nil {
		return x.Encounter
	}
	return nil
}

func (x *RaidSimRequest) GetRandomSeed() int64 {
	if x != nil {
		return x.RandomSeed
	}
	return 0
}

func (x *RaidSimRequest) GetGcdMin() float64 {
	if x != nil {
		return x.GcdMin
	}
	return 0
}

func (x *RaidSimRequest) GetDebug() bool {
	if x != nil {
		return x.Debug
	}
	return false
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Slot        int32       `protobuf:"varint,2,opt,name=slot,proto3" json:"slot,omitempty"`
	SubSlot     int32       `protobuf:"varint,3,opt,name=sub_slot,json=subSlot,proto3" json:"sub_slot,omitempty"`
	Name        string      `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Stats       []float64   `protobuf:"fixed64,5,rep,packed,name=stats,proto3" json:"stats,omitempty"`
	Phase       int32       `protobuf:"varint,6,opt,name=phase,proto3" json:"phase,omitempty"`
	Quality     ItemQuality `protobuf:"varint,7,opt,name=quality,proto3,enum=newapi.ItemQuality" json:"quality,omitempty"`
	GemSlots    []GemColor  `protobuf:"varint,8,rep,packed,name=gem_slots,json=gemSlots,proto3,enum=newapi.GemColor" json:"gem_slots,omitempty"`
	SocketBonus []float64   `protobuf:"fixed64,9,rep,packed,name=socket_bonus,json=socketBonus,proto3" json:"socket_bonus,omitempty"` // does the client need this any more?
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{22}
}

func (x *Item) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

func (x *Item) GetSubSlot() int32 {
	if x != nil {
		return x.SubSlot
	}
	return 0
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetStats() []float64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Item) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *Item) GetQuality() ItemQuality {
	if x != nil {
		return x.Quality
	}
	return ItemQuality_junk
}

func (x *Item) GetGemSlots() []GemColor {
	if x != nil {
		return x.GemSlots
	}
	return nil
}

func (x *Item) GetSocketBonus() []float64 {
	if x != nil {
		return x.SocketBonus
	}
	return nil
}

type Enchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // ID of the enchant "item".
	EffectId int32  `protobuf:"varint,2,opt,name=effect_id,json=effectId,proto3" json:"effect_id,omitempty"` // ID of the effect (for the item tooltip UI)
	Name     string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Slot     int32  `protobuf:"varint,5,opt,name=slot,proto3" json:"slot,omitempty"` // which slot does the enchant go on.
}

func (x *Enchant) Reset() {
	*x = Enchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enchant) ProtoMessage() {}

func (x *Enchant) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enchant.ProtoReflect.Descriptor instead.
func (*Enchant) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{23}
}

func (x *Enchant) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Enchant) GetEffectId() int32 {
	if x != nil {
		return x.EffectId
	}
	return 0
}

func (x *Enchant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enchant) GetSlot() int32 {
	if x != nil {
		return x.Slot
	}
	return 0
}

type Gem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Stats   []float64   `protobuf:"fixed64,3,rep,packed,name=stats,proto3" json:"stats,omitempty"`
	Color   GemColor    `protobuf:"varint,4,opt,name=color,proto3,enum=newapi.GemColor" json:"color,omitempty"`
	Phase   int32       `protobuf:"varint,5,opt,name=phase,proto3" json:"phase,omitempty"`
	Quality ItemQuality `protobuf:"varint,6,opt,name=quality,proto3,enum=newapi.ItemQuality" json:"quality,omitempty"`
}

func (x *Gem) Reset() {
	*x = Gem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gem) ProtoMessage() {}

func (x *Gem) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gem.ProtoReflect.Descriptor instead.
func (*Gem) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{24}
}

func (x *Gem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Gem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gem) GetStats() []float64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Gem) GetColor() GemColor {
	if x != nil {
		return x.Color
	}
	return GemColor_unknown_color
}

func (x *Gem) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *Gem) GetQuality() ItemQuality {
	if x != nil {
		return x.Quality
	}
	return ItemQuality_junk
}

type GearListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Spec Spec `protobuf:"varint,1,opt,name=spec,proto3,enum=newapi.Spec" json:"spec,omitempty"` // Each spec has a custom gear list
}

func (x *GearListRequest) Reset() {
	*x = GearListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearListRequest) ProtoMessage() {}

func (x *GearListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearListRequest.ProtoReflect.Descriptor instead.
func (*GearListRequest) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{25}
}

func (x *GearListRequest) GetSpec() Spec {
	if x != nil {
		return x.Spec
	}
	return Spec_elemental_shaman
}

type GearListResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*Item    `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Enchants []*Enchant `protobuf:"bytes,2,rep,name=enchants,proto3" json:"enchants,omitempty"`
	Gems     []*Gem     `protobuf:"bytes,3,rep,name=gems,proto3" json:"gems,omitempty"`
}

func (x *GearListResult) Reset() {
	*x = GearListResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GearListResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GearListResult) ProtoMessage() {}

func (x *GearListResult) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GearListResult.ProtoReflect.Descriptor instead.
func (*GearListResult) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{26}
}

func (x *GearListResult) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *GearListResult) GetEnchants() []*Enchant {
	if x != nil {
		return x.Enchants
	}
	return nil
}

func (x *GearListResult) GetGems() []*Gem {
	if x != nil {
		return x.Gems
	}
	return nil
}

// RPC ComputeStats
type ComputeStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Player *Player        `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Buffs  *Buffs         `protobuf:"bytes,2,opt,name=buffs,proto3" json:"buffs,omitempty"`
	Gear   *EquipmentSpec `protobuf:"bytes,3,opt,name=gear,proto3" json:"gear,omitempty"`
}

func (x *ComputeStatsRequest) Reset() {
	*x = ComputeStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeStatsRequest) ProtoMessage() {}

func (x *ComputeStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeStatsRequest.ProtoReflect.Descriptor instead.
func (*ComputeStatsRequest) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{27}
}

func (x *ComputeStatsRequest) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *ComputeStatsRequest) GetBuffs() *Buffs {
	if x != nil {
		return x.Buffs
	}
	return nil
}

func (x *ComputeStatsRequest) GetGear() *EquipmentSpec {
	if x != nil {
		return x.Gear
	}
	return nil
}

type ComputeStatsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GearOnly   []float64 `protobuf:"fixed64,1,rep,packed,name=gear_only,json=gearOnly,proto3" json:"gear_only,omitempty"`
	FinalStats []float64 `protobuf:"fixed64,2,rep,packed,name=finalStats,proto3" json:"finalStats,omitempty"`
	Sets       []string  `protobuf:"bytes,3,rep,name=sets,proto3" json:"sets,omitempty"`
}

func (x *ComputeStatsResult) Reset() {
	*x = ComputeStatsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComputeStatsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeStatsResult) ProtoMessage() {}

func (x *ComputeStatsResult) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeStatsResult.ProtoReflect.Descriptor instead.
func (*ComputeStatsResult) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{28}
}

func (x *ComputeStatsResult) GetGearOnly() []float64 {
	if x != nil {
		return x.GearOnly
	}
	return nil
}

func (x *ComputeStatsResult) GetFinalStats() []float64 {
	if x != nil {
		return x.FinalStats
	}
	return nil
}

func (x *ComputeStatsResult) GetSets() []string {
	if x != nil {
		return x.Sets
	}
	return nil
}

// RPC StatWeights
type StatWeightsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Options      *IndividualSimRequest `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	StatsToWeigh []int32               `protobuf:"varint,2,rep,packed,name=stats_to_weigh,json=statsToWeigh,proto3" json:"stats_to_weigh,omitempty"`
	BaseStat     int32                 `protobuf:"varint,3,opt,name=base_stat,json=baseStat,proto3" json:"base_stat,omitempty"`
}

func (x *StatWeightsRequest) Reset() {
	*x = StatWeightsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatWeightsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatWeightsRequest) ProtoMessage() {}

func (x *StatWeightsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatWeightsRequest.ProtoReflect.Descriptor instead.
func (*StatWeightsRequest) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{29}
}

func (x *StatWeightsRequest) GetOptions() *IndividualSimRequest {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StatWeightsRequest) GetStatsToWeigh() []int32 {
	if x != nil {
		return x.StatsToWeigh
	}
	return nil
}

func (x *StatWeightsRequest) GetBaseStat() int32 {
	if x != nil {
		return x.BaseStat
	}
	return 0
}

type StatWeightsResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Weights       []float64 `protobuf:"fixed64,1,rep,packed,name=weights,proto3" json:"weights,omitempty"`
	WeightsStdev  []float64 `protobuf:"fixed64,2,rep,packed,name=Weights_stdev,json=WeightsStdev,proto3" json:"Weights_stdev,omitempty"`
	EpValues      []float64 `protobuf:"fixed64,3,rep,packed,name=ep_values,json=epValues,proto3" json:"ep_values,omitempty"`
	EpValuesStdev []float64 `protobuf:"fixed64,4,rep,packed,name=ep_values_stdev,json=epValuesStdev,proto3" json:"ep_values_stdev,omitempty"`
}

func (x *StatWeightsResult) Reset() {
	*x = StatWeightsResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatWeightsResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatWeightsResult) ProtoMessage() {}

func (x *StatWeightsResult) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatWeightsResult.ProtoReflect.Descriptor instead.
func (*StatWeightsResult) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{30}
}

func (x *StatWeightsResult) GetWeights() []float64 {
	if x != nil {
		return x.Weights
	}
	return nil
}

func (x *StatWeightsResult) GetWeightsStdev() []float64 {
	if x != nil {
		return x.WeightsStdev
	}
	return nil
}

func (x *StatWeightsResult) GetEpValues() []float64 {
	if x != nil {
		return x.EpValues
	}
	return nil
}

func (x *StatWeightsResult) GetEpValuesStdev() []float64 {
	if x != nil {
		return x.EpValuesStdev
	}
	return nil
}

type Shaman_ShamanSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LightningOverload  int32 `protobuf:"varint,1,opt,name=lightning_overload,json=lightningOverload,proto3" json:"lightning_overload,omitempty"`
	ElementalPrecision int32 `protobuf:"varint,2,opt,name=elemental_precision,json=elementalPrecision,proto3" json:"elemental_precision,omitempty"`
	NaturesGuidance    int32 `protobuf:"varint,3,opt,name=natures_guidance,json=naturesGuidance,proto3" json:"natures_guidance,omitempty"`
	TidalMastery       int32 `protobuf:"varint,4,opt,name=tidal_mastery,json=tidalMastery,proto3" json:"tidal_mastery,omitempty"`
	ElementalMastery   bool  `protobuf:"varint,5,opt,name=elemental_mastery,json=elementalMastery,proto3" json:"elemental_mastery,omitempty"`
	UnrelentingStorm   int32 `protobuf:"varint,6,opt,name=unrelenting_storm,json=unrelentingStorm,proto3" json:"unrelenting_storm,omitempty"`
	CallOfThunder      int32 `protobuf:"varint,7,opt,name=call_of_thunder,json=callOfThunder,proto3" json:"call_of_thunder,omitempty"`
	Convection         int32 `protobuf:"varint,8,opt,name=convection,proto3" json:"convection,omitempty"`
	Concussion         int32 `protobuf:"varint,9,opt,name=concussion,proto3" json:"concussion,omitempty"`
}

func (x *Shaman_ShamanSpec) Reset() {
	*x = Shaman_ShamanSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_newapi_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shaman_ShamanSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shaman_ShamanSpec) ProtoMessage() {}

func (x *Shaman_ShamanSpec) ProtoReflect() protoreflect.Message {
	mi := &file_newapi_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shaman_ShamanSpec.ProtoReflect.Descriptor instead.
func (*Shaman_ShamanSpec) Descriptor() ([]byte, []int) {
	return file_newapi_proto_rawDescGZIP(), []int{9, 0}
}

func (x *Shaman_ShamanSpec) GetLightningOverload() int32 {
	if x != nil {
		return x.LightningOverload
	}
	return 0
}

func (x *Shaman_ShamanSpec) GetElementalPrecision() int32 {
	if x != nil {
		return x.ElementalPrecision
	}
	return 0
}

func (x *Shaman_ShamanSpec) GetNaturesGuidance() int32 {
	if x != nil {
		return x.NaturesGuidance
	}
	return 0
}

func (x *Shaman_ShamanSpec) GetTidalMastery() int32 {
	if x != nil {
		return x.TidalMastery
	}
	return 0
}

func (x *Shaman_ShamanSpec) GetElementalMastery() bool {
	if x != nil {
		return x.ElementalMastery
	}
	return false
}

func (x *Shaman_ShamanSpec) GetUnrelentingStorm() int32 {
	if x != nil {
		return x.UnrelentingStorm
	}
	return 0
}

func (x *Shaman_ShamanSpec) GetCallOfThunder() int32 {
	if x != nil {
		return x.CallOfThunder
	}
	return 0
}

func (x *Shaman_ShamanSpec) GetConvection() int32 {
	if x != nil {
		return x.Convection
	}
	return 0
}

func (x *Shaman_ShamanSpec) GetConcussion() int32 {
	if x != nil {
		return x.Concussion
	}
	return 0
}

var File_newapi_proto protoreflect.FileDescriptor

var file_newapi_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x22, 0xd3, 0x05, 0x0a, 0x05, 0x42, 0x75, 0x66, 0x66, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x72, 0x63, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x72, 0x63, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x10, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x77,
	0x69, 0x6c, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x4f,
	0x66, 0x54, 0x68, 0x65, 0x57, 0x69, 0x6c, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c, 0x65, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x4b,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x5f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x69, 0x73,
	0x64, 0x6f, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x69, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f, 0x66, 0x57, 0x69, 0x73,
	0x64, 0x6f, 0x6d, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x64, 0x69, 0x76, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x44, 0x69, 0x76,
	0x69, 0x6e, 0x65, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x6f, 0x6f,
	0x6e, 0x6b, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6d, 0x6f, 0x6f, 0x6e,
	0x6b, 0x69, 0x6e, 0x12, 0x32, 0x0a, 0x15, 0x6d, 0x6f, 0x6f, 0x6e, 0x6b, 0x69, 0x6e, 0x5f, 0x72,
	0x61, 0x76, 0x65, 0x6e, 0x5f, 0x67, 0x6f, 0x64, 0x64, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x6d, 0x6f, 0x6f, 0x6e, 0x6b, 0x69, 0x6e, 0x52, 0x61, 0x76, 0x65, 0x6e,
	0x47, 0x6f, 0x64, 0x64, 0x65, 0x73, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x72, 0x69, 0x65,
	0x73, 0x74, 0x5f, 0x64, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x70,
	0x72, 0x69, 0x65, 0x73, 0x74, 0x44, 0x70, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f,
	0x64, 0x6c, 0x75, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f,
	0x6f, 0x64, 0x6c, 0x75, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0c, 0x77, 0x72, 0x61, 0x74, 0x68, 0x5f,
	0x6f, 0x66, 0x5f, 0x61, 0x69, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x77, 0x72,
	0x61, 0x74, 0x68, 0x4f, 0x66, 0x41, 0x69, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x65,
	0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x72, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x4f, 0x66, 0x57, 0x72, 0x61, 0x74, 0x68, 0x12, 0x1f,
	0x0a, 0x0b, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12,
	0x2e, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6f, 0x66, 0x5f,
	0x77, 0x69, 0x73, 0x64, 0x6f, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x6a, 0x75,
	0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x57, 0x69, 0x73, 0x64, 0x6f, 0x6d, 0x12,
	0x40, 0x0a, 0x1d, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x61, 0x6c,
	0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x63, 0x72, 0x75, 0x73, 0x61, 0x64, 0x65, 0x72,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64,
	0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x43, 0x72, 0x75, 0x73, 0x61, 0x64, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x65, 0x72, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x10, 0x65, 0x79, 0x65,
	0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x79, 0x65, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x4e, 0x69, 0x67,
	0x68, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x68, 0x65, 0x5f, 0x74, 0x77, 0x69, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x6f, 0x77, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x54, 0x68,
	0x65, 0x54, 0x77, 0x69, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x77, 0x6c, 0x22, 0xa8, 0x03, 0x0a,
	0x08, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x69,
	0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x77, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x69,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61,
	0x6e, 0x74, 0x57, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x4f, 0x69, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x6d,
	0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x67, 0x65, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x4d, 0x61, 0x67, 0x65, 0x62,
	0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x6c, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x6c, 0x61, 0x73, 0x6b, 0x4f, 0x66, 0x42, 0x6c,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d, 0x0a, 0x1b, 0x66,
	0x6c, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x69, 0x67, 0x68, 0x74, 0x79, 0x5f, 0x72,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x18, 0x66, 0x6c, 0x61, 0x73, 0x6b, 0x4f, 0x66, 0x4d, 0x69, 0x67, 0x68, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x62, 0x6c,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x6c, 0x69, 0x73, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x42,
	0x61, 0x73, 0x69, 0x6c, 0x69, 0x73, 0x6b, 0x12, 0x2d, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x75, 0x70, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x6e, 0x61, 0x50, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x72, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x61, 0x72, 0x6b, 0x52, 0x75, 0x6e, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x64, 0x72, 0x75, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x61, 0x74, 0x74,
	0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x72, 0x75, 0x6d, 0x73, 0x4f,
	0x66, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x22, 0xe8, 0x03, 0x0a, 0x0d, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x72, 0x61, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x52, 0x61, 0x63, 0x65, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x72, 0x61, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x64, 0x72, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x72, 0x75,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x05, 0x64, 0x72, 0x75, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x68,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x48, 0x00, 0x52, 0x06, 0x68,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x61, 0x67,
	0x65, 0x48, 0x00, 0x52, 0x04, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x07, 0x70, 0x61, 0x6c,
	0x61, 0x64, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x77,
	0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70,
	0x61, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x72, 0x69, 0x65, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x50, 0x72, 0x69, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x69, 0x65, 0x73, 0x74,
	0x12, 0x25, 0x0a, 0x05, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x48, 0x00,
	0x52, 0x05, 0x72, 0x6f, 0x67, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x68, 0x61, 0x6d, 0x61,
	0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x73, 0x68, 0x61, 0x6d, 0x61,
	0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x72, 0x6c,
	0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b,
	0x0a, 0x07, 0x77, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72,
	0x48, 0x00, 0x52, 0x07, 0x77, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x08, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x52,
	0x08, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x22, 0x07, 0x0a, 0x05, 0x44, 0x72, 0x75, 0x69, 0x64, 0x22, 0x08, 0x0a, 0x06, 0x48,
	0x75, 0x6e, 0x74, 0x65, 0x72, 0x22, 0x06, 0x0a, 0x04, 0x4d, 0x61, 0x67, 0x65, 0x22, 0x09, 0x0a,
	0x07, 0x50, 0x61, 0x6c, 0x61, 0x64, 0x69, 0x6e, 0x22, 0x08, 0x0a, 0x06, 0x50, 0x72, 0x69, 0x65,
	0x73, 0x74, 0x22, 0x07, 0x0a, 0x05, 0x52, 0x6f, 0x67, 0x75, 0x65, 0x22, 0xfc, 0x05, 0x0a, 0x06,
	0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x12, 0x36, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x77, 0x61,
	0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e,
	0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x53, 0x68, 0x61,
	0x6d, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64,
	0x12, 0x44, 0x0a, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xfe, 0x02, 0x0a, 0x0a, 0x53, 0x68, 0x61, 0x6d, 0x61,
	0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65, 0x72,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x5f, 0x67, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x69, 0x64, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x64, 0x61, 0x6c, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75,
	0x6e, 0x72, 0x65, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x12,
	0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x75, 0x6e, 0x64,
	0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x66,
	0x54, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x76, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x3f, 0x0a, 0x11, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x60, 0x0a, 0x09, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x5f, 0x6c, 0x62, 0x5f, 0x63, 0x6c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x63, 0x6c, 0x5f,
	0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x63, 0x61, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x61, 0x64, 0x61, 0x70, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08,
	0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x10, 0x04, 0x22, 0x09, 0x0a, 0x07, 0x57, 0x61,
	0x72, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x09, 0x0a, 0x07, 0x57, 0x61, 0x72, 0x72, 0x69, 0x6f, 0x72,
	0x22, 0x48, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65,
	0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x67, 0x65, 0x6d, 0x73, 0x22, 0x37, 0x0a, 0x0d, 0x45, 0x71,
	0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x26, 0x0a, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6e, 0x65, 0x77,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x33, 0x0a, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x71, 0x75, 0x69,
	0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x09, 0x65, 0x71, 0x75, 0x69, 0x70,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x73, 0x22, 0x31, 0x0a, 0x05, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x12, 0x28, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x2f, 0x0a, 0x04, 0x52, 0x61,
	0x69, 0x64, 0x12, 0x27, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x69, 0x65, 0x73, 0x22, 0x6b, 0x0a, 0x09, 0x45,
	0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0xa4, 0x02, 0x0a, 0x14, 0x49, 0x6e, 0x64,
	0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x75, 0x66,
	0x66, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x75, 0x66, 0x66, 0x73, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x2f,
	0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65, 0x65, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x67, 0x63, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x06, 0x67, 0x63, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x62,
	0x75, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67, 0x12,
	0x1e, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x6f, 0x6f, 0x6d, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x65, 0x78, 0x69, 0x74, 0x4f, 0x6e, 0x4f, 0x6f, 0x6d, 0x22,
	0xab, 0x04, 0x0a, 0x13, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x69,
	0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x32, 0x0a, 0x15, 0x65, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6c,
	0x6f, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6c, 0x6f, 0x67, 0x73, 0x12,
	0x17, 0x0a, 0x07, 0x64, 0x70, 0x73, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x06, 0x64, 0x70, 0x73, 0x41, 0x76, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x70, 0x73, 0x5f,
	0x73, 0x74, 0x64, 0x65, 0x76, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x70, 0x73,
	0x53, 0x74, 0x64, 0x65, 0x76, 0x12, 0x17, 0x0a, 0x07, 0x64, 0x70, 0x73, 0x5f, 0x6d, 0x61, 0x78,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x70, 0x73, 0x4d, 0x61, 0x78, 0x12, 0x43,
	0x0a, 0x08, 0x64, 0x70, 0x73, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69,
	0x64, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x44, 0x70,
	0x73, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x70, 0x73, 0x48,
	0x69, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x6f, 0x6d, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x4f, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x0a,
	0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x74, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x6f, 0x6f, 0x6d, 0x41, 0x74, 0x41, 0x76, 0x67, 0x12, 0x23, 0x0a, 0x0e, 0x64, 0x70,
	0x73, 0x5f, 0x61, 0x74, 0x5f, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x76, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0b, 0x64, 0x70, 0x73, 0x41, 0x74, 0x4f, 0x6f, 0x6d, 0x41, 0x76, 0x67, 0x12,
	0x3c, 0x0a, 0x05, 0x63, 0x61, 0x73, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x75,
	0x61, 0x6c, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x43, 0x61, 0x73, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x70, 0x73, 0x48, 0x69, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x4c, 0x0a, 0x0a, 0x43, 0x61, 0x73, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4c, 0x0a,
	0x0a, 0x43, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x06, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x6d, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x04, 0x64, 0x6d, 0x67, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x05, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0e,
	0x52, 0x61, 0x69, 0x64, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20,
	0x0a, 0x04, 0x72, 0x61, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6e,
	0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x69, 0x64, 0x52, 0x04, 0x72, 0x61, 0x69, 0x64,
	0x12, 0x2f, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6e, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65,
	0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x65, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x61, 0x6e, 0x64, 0x6f, 0x6d, 0x53, 0x65,
	0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x67, 0x63, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x06, 0x67, 0x63, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x64,
	0x65, 0x62, 0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64, 0x65, 0x62, 0x75,
	0x67, 0x22, 0x86, 0x02, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c,
	0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x12, 0x19,
	0x0a, 0x08, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x73, 0x75, 0x62, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65, 0x77,
	0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x67, 0x65, 0x6d, 0x5f,
	0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x65,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x08, 0x67,
	0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x5f, 0x62, 0x6f, 0x6e, 0x75, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x6f, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x6f, 0x6e, 0x75, 0x73, 0x22, 0x5e, 0x0a, 0x07, 0x45, 0x6e,
	0x63, 0x68, 0x61, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6c, 0x6f, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x03, 0x47,
	0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x05,
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6e, 0x65,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6e, 0x65,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x33, 0x0a, 0x0f, 0x47, 0x65, 0x61,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x77,
	0x61, 0x70, 0x69, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x22, 0x82,
	0x01, 0x0a, 0x0e, 0x47, 0x65, 0x61, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x12, 0x22, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69,
	0x2e, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6d, 0x52, 0x04, 0x67,
	0x65, 0x6d, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6e, 0x65,
	0x77, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x06, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x75, 0x66, 0x66,
	0x73, 0x52, 0x05, 0x62, 0x75, 0x66, 0x66, 0x73, 0x12, 0x29, 0x0a, 0x04, 0x67, 0x65, 0x61, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e,
	0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x67,
	0x65, 0x61, 0x72, 0x22, 0x65, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x65, 0x61,
	0x72, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x67, 0x65,
	0x61, 0x72, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x12, 0x53,
	0x74, 0x61, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x77, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x75, 0x61, 0x6c, 0x53, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x6f, 0x57, 0x65, 0x69, 0x67, 0x68, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x22, 0x97, 0x01, 0x0a,
	0x11, 0x53, 0x74, 0x61, 0x74, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x07, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x73, 0x74, 0x64, 0x65, 0x76, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x0c, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x73, 0x53, 0x74, 0x64, 0x65,
	0x76, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x65, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x74, 0x64, 0x65,
	0x76, 0x18, 0x04, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0d, 0x65, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x53, 0x74, 0x64, 0x65, 0x76, 0x2a, 0x9e, 0x01, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x65, 0x42,
	0x6f, 0x6e, 0x75, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x65, 0x6c, 0x66, 0x10, 0x01,
	0x12, 0x0b, 0x0a, 0x07, 0x64, 0x72, 0x61, 0x65, 0x6e, 0x65, 0x69, 0x10, 0x02, 0x12, 0x09, 0x0a,
	0x05, 0x64, 0x77, 0x61, 0x72, 0x66, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x67, 0x6e, 0x6f, 0x6d,
	0x65, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x68, 0x75, 0x6d, 0x61, 0x6e, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x65, 0x6c, 0x66, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03,
	0x6f, 0x72, 0x63, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x74, 0x61, 0x75, 0x72, 0x65, 0x6e, 0x10,
	0x08, 0x12, 0x0b, 0x0a, 0x07, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x31, 0x30, 0x10, 0x09, 0x12, 0x0b,
	0x0a, 0x07, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x33, 0x30, 0x10, 0x0a, 0x12, 0x0a, 0x0a, 0x06, 0x75,
	0x6e, 0x64, 0x65, 0x61, 0x64, 0x10, 0x0b, 0x2a, 0xcc, 0x03, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74,
	0x12, 0x0c, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x61, 0x67, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x73,
	0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x73, 0x70, 0x69, 0x72, 0x69,
	0x74, 0x10, 0x04, 0x12, 0x0e, 0x0a, 0x0a, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x63, 0x72, 0x69,
	0x74, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x69, 0x74,
	0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x08,
	0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x68, 0x61, 0x73, 0x74, 0x65, 0x10,
	0x09, 0x12, 0x07, 0x0a, 0x03, 0x6d, 0x70, 0x35, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x70, 0x65, 0x6e, 0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x65,
	0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x0c, 0x12, 0x16,
	0x0a, 0x12, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x10, 0x0d, 0x12, 0x15, 0x0a, 0x11, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x5f,
	0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x0e, 0x12, 0x16, 0x0a,
	0x12, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x10, 0x0f, 0x12, 0x14, 0x0a, 0x10, 0x68, 0x6f, 0x6c, 0x79, 0x5f, 0x73, 0x70,
	0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x10, 0x12, 0x16, 0x0a, 0x12, 0x61,
	0x72, 0x63, 0x61, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x10, 0x12, 0x12, 0x0d, 0x0a, 0x09, 0x6d, 0x65, 0x6c, 0x65, 0x65, 0x5f, 0x68,
	0x69, 0x74, 0x10, 0x13, 0x12, 0x0f, 0x0a, 0x0b, 0x6d, 0x65, 0x6c, 0x65, 0x65, 0x5f, 0x68, 0x61,
	0x73, 0x74, 0x65, 0x10, 0x14, 0x12, 0x0e, 0x0a, 0x0a, 0x6d, 0x65, 0x6c, 0x65, 0x65, 0x5f, 0x63,
	0x72, 0x69, 0x74, 0x10, 0x15, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x10, 0x16, 0x12, 0x15, 0x0a, 0x11, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x70, 0x65,
	0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x17, 0x12, 0x08, 0x0a, 0x04, 0x6d,
	0x61, 0x6e, 0x61, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x10,
	0x19, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x61, 0x67, 0x65, 0x10, 0x1a, 0x12, 0x09, 0x0a, 0x05, 0x61,
	0x72, 0x6d, 0x6f, 0x72, 0x10, 0x1b, 0x2a, 0x48, 0x0a, 0x0b, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x6a, 0x75, 0x6e, 0x6b, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x08, 0x0a,
	0x04, 0x72, 0x61, 0x72, 0x65, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x65, 0x70, 0x69, 0x63, 0x10,
	0x03, 0x12, 0x0d, 0x0a, 0x09, 0x6c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x10, 0x04,
	0x2a, 0x78, 0x0a, 0x08, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x11, 0x0a, 0x0d,
	0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x72, 0x65, 0x64,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x79, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65,
	0x6e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x10, 0x06, 0x12,
	0x0a, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x0d, 0x0a, 0x09, 0x70,
	0x72, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x10, 0x08, 0x2a, 0x1c, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x14, 0x0a, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x10, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x61, 0x70, 0x69, 0x2f,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_newapi_proto_rawDescOnce sync.Once
	file_newapi_proto_rawDescData = file_newapi_proto_rawDesc
)

func file_newapi_proto_rawDescGZIP() []byte {
	file_newapi_proto_rawDescOnce.Do(func() {
		file_newapi_proto_rawDescData = protoimpl.X.CompressGZIP(file_newapi_proto_rawDescData)
	})
	return file_newapi_proto_rawDescData
}

var file_newapi_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_newapi_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_newapi_proto_goTypes = []interface{}{
	(RaceBonusType)(0),           // 0: newapi.RaceBonusType
	(Stat)(0),                    // 1: newapi.Stat
	(ItemQuality)(0),             // 2: newapi.ItemQuality
	(GemColor)(0),                // 3: newapi.GemColor
	(Spec)(0),                    // 4: newapi.Spec
	(Shaman_AgentType)(0),        // 5: newapi.Shaman.AgentType
	(*Buffs)(nil),                // 6: newapi.Buffs
	(*Consumes)(nil),             // 7: newapi.Consumes
	(*PlayerOptions)(nil),        // 8: newapi.PlayerOptions
	(*Druid)(nil),                // 9: newapi.Druid
	(*Hunter)(nil),               // 10: newapi.Hunter
	(*Mage)(nil),                 // 11: newapi.Mage
	(*Paladin)(nil),              // 12: newapi.Paladin
	(*Priest)(nil),               // 13: newapi.Priest
	(*Rogue)(nil),                // 14: newapi.Rogue
	(*Shaman)(nil),               // 15: newapi.Shaman
	(*Warlock)(nil),              // 16: newapi.Warlock
	(*Warrior)(nil),              // 17: newapi.Warrior
	(*ItemSpec)(nil),             // 18: newapi.ItemSpec
	(*EquipmentSpec)(nil),        // 19: newapi.EquipmentSpec
	(*Player)(nil),               // 20: newapi.Player
	(*Party)(nil),                // 21: newapi.Party
	(*Raid)(nil),                 // 22: newapi.Raid
	(*Encounter)(nil),            // 23: newapi.Encounter
	(*IndividualSimRequest)(nil), // 24: newapi.IndividualSimRequest
	(*IndividualSimResult)(nil),  // 25: newapi.IndividualSimResult
	(*CastMetric)(nil),           // 26: newapi.CastMetric
	(*RaidSimRequest)(nil),       // 27: newapi.RaidSimRequest
	(*Item)(nil),                 // 28: newapi.Item
	(*Enchant)(nil),              // 29: newapi.Enchant
	(*Gem)(nil),                  // 30: newapi.Gem
	(*GearListRequest)(nil),      // 31: newapi.GearListRequest
	(*GearListResult)(nil),       // 32: newapi.GearListResult
	(*ComputeStatsRequest)(nil),  // 33: newapi.ComputeStatsRequest
	(*ComputeStatsResult)(nil),   // 34: newapi.ComputeStatsResult
	(*StatWeightsRequest)(nil),   // 35: newapi.StatWeightsRequest
	(*StatWeightsResult)(nil),    // 36: newapi.StatWeightsResult
	(*Shaman_ShamanSpec)(nil),    // 37: newapi.Shaman.ShamanSpec
	nil,                          // 38: newapi.Shaman.AgentOptionsEntry
	nil,                          // 39: newapi.IndividualSimResult.DpsHistEntry
	nil,                          // 40: newapi.IndividualSimResult.CastsEntry
}
var file_newapi_proto_depIdxs = []int32{
	0,  // 0: newapi.PlayerOptions.race:type_name -> newapi.RaceBonusType
	9,  // 1: newapi.PlayerOptions.druid:type_name -> newapi.Druid
	10, // 2: newapi.PlayerOptions.hunter:type_name -> newapi.Hunter
	11, // 3: newapi.PlayerOptions.mage:type_name -> newapi.Mage
	12, // 4: newapi.PlayerOptions.paladin:type_name -> newapi.Paladin
	13, // 5: newapi.PlayerOptions.priest:type_name -> newapi.Priest
	14, // 6: newapi.PlayerOptions.rogue:type_name -> newapi.Rogue
	15, // 7: newapi.PlayerOptions.shaman:type_name -> newapi.Shaman
	16, // 8: newapi.PlayerOptions.warlock:type_name -> newapi.Warlock
	17, // 9: newapi.PlayerOptions.warrior:type_name -> newapi.Warrior
	7,  // 10: newapi.PlayerOptions.consumes:type_name -> newapi.Consumes
	5,  // 11: newapi.Shaman.agentType:type_name -> newapi.Shaman.AgentType
	37, // 12: newapi.Shaman.spec:type_name -> newapi.Shaman.ShamanSpec
	38, // 13: newapi.Shaman.AgentOptions:type_name -> newapi.Shaman.AgentOptionsEntry
	18, // 14: newapi.EquipmentSpec.items:type_name -> newapi.ItemSpec
	8,  // 15: newapi.Player.options:type_name -> newapi.PlayerOptions
	19, // 16: newapi.Player.equipment:type_name -> newapi.EquipmentSpec
	20, // 17: newapi.Party.players:type_name -> newapi.Player
	21, // 18: newapi.Raid.parties:type_name -> newapi.Party
	20, // 19: newapi.IndividualSimRequest.player:type_name -> newapi.Player
	6,  // 20: newapi.IndividualSimRequest.buffs:type_name -> newapi.Buffs
	23, // 21: newapi.IndividualSimRequest.encounter:type_name -> newapi.Encounter
	39, // 22: newapi.IndividualSimResult.dps_hist:type_name -> newapi.IndividualSimResult.DpsHistEntry
	40, // 23: newapi.IndividualSimResult.casts:type_name -> newapi.IndividualSimResult.CastsEntry
	22, // 24: newapi.RaidSimRequest.raid:type_name -> newapi.Raid
	23, // 25: newapi.RaidSimRequest.encounter:type_name -> newapi.Encounter
	2,  // 26: newapi.Item.quality:type_name -> newapi.ItemQuality
	3,  // 27: newapi.Item.gem_slots:type_name -> newapi.GemColor
	3,  // 28: newapi.Gem.color:type_name -> newapi.GemColor
	2,  // 29: newapi.Gem.quality:type_name -> newapi.ItemQuality
	4,  // 30: newapi.GearListRequest.spec:type_name -> newapi.Spec
	28, // 31: newapi.GearListResult.items:type_name -> newapi.Item
	29, // 32: newapi.GearListResult.enchants:type_name -> newapi.Enchant
	30, // 33: newapi.GearListResult.gems:type_name -> newapi.Gem
	20, // 34: newapi.ComputeStatsRequest.player:type_name -> newapi.Player
	6,  // 35: newapi.ComputeStatsRequest.buffs:type_name -> newapi.Buffs
	19, // 36: newapi.ComputeStatsRequest.gear:type_name -> newapi.EquipmentSpec
	24, // 37: newapi.StatWeightsRequest.options:type_name -> newapi.IndividualSimRequest
	26, // 38: newapi.IndividualSimResult.CastsEntry.value:type_name -> newapi.CastMetric
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_newapi_proto_init() }
func file_newapi_proto_init() {
	if File_newapi_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_newapi_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buffs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consumes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlayerOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Druid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hunter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Mage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Paladin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Priest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rogue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shaman); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warrior); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Player); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Party); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Raid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndividualSimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndividualSimResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CastMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaidSimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GearListResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComputeStatsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatWeightsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatWeightsResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_newapi_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shaman_ShamanSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_newapi_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*PlayerOptions_Druid)(nil),
		(*PlayerOptions_Hunter)(nil),
		(*PlayerOptions_Mage)(nil),
		(*PlayerOptions_Paladin)(nil),
		(*PlayerOptions_Priest)(nil),
		(*PlayerOptions_Rogue)(nil),
		(*PlayerOptions_Shaman)(nil),
		(*PlayerOptions_Warlock)(nil),
		(*PlayerOptions_Warrior)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_newapi_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_newapi_proto_goTypes,
		DependencyIndexes: file_newapi_proto_depIdxs,
		EnumInfos:         file_newapi_proto_enumTypes,
		MessageInfos:      file_newapi_proto_msgTypes,
	}.Build()
	File_newapi_proto = out.File
	file_newapi_proto_rawDesc = nil
	file_newapi_proto_goTypes = nil
	file_newapi_proto_depIdxs = nil
}
