// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: common.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Race int32

const (
	Race_RaceUnknown  Race = 0
	Race_RaceBloodElf Race = 1
	Race_RaceDraenei  Race = 2
	Race_RaceDwarf    Race = 3
	Race_RaceGnome    Race = 4
	Race_RaceHuman    Race = 5
	Race_RaceNightElf Race = 6
	Race_RaceOrc      Race = 7
	Race_RaceTauren   Race = 8
	Race_RaceTroll10  Race = 9
	Race_RaceTroll30  Race = 10
	Race_RaceUndead   Race = 11
)

// Enum value maps for Race.
var (
	Race_name = map[int32]string{
		0:  "RaceUnknown",
		1:  "RaceBloodElf",
		2:  "RaceDraenei",
		3:  "RaceDwarf",
		4:  "RaceGnome",
		5:  "RaceHuman",
		6:  "RaceNightElf",
		7:  "RaceOrc",
		8:  "RaceTauren",
		9:  "RaceTroll10",
		10: "RaceTroll30",
		11: "RaceUndead",
	}
	Race_value = map[string]int32{
		"RaceUnknown":  0,
		"RaceBloodElf": 1,
		"RaceDraenei":  2,
		"RaceDwarf":    3,
		"RaceGnome":    4,
		"RaceHuman":    5,
		"RaceNightElf": 6,
		"RaceOrc":      7,
		"RaceTauren":   8,
		"RaceTroll10":  9,
		"RaceTroll30":  10,
		"RaceUndead":   11,
	}
)

func (x Race) Enum() *Race {
	p := new(Race)
	*p = x
	return p
}

func (x Race) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Race) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[0].Descriptor()
}

func (Race) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[0]
}

func (x Race) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Race.Descriptor instead.
func (Race) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

type Class int32

const (
	Class_ClassUnknown Class = 0
	Class_ClassDruid   Class = 1
	Class_ClassHunter  Class = 2
	Class_ClassMage    Class = 3
	Class_ClassPaladin Class = 4
	Class_ClassPriest  Class = 5
	Class_ClassRogue   Class = 6
	Class_ClassShaman  Class = 7
	Class_ClassWarlock Class = 8
	Class_ClassWarrior Class = 9
)

// Enum value maps for Class.
var (
	Class_name = map[int32]string{
		0: "ClassUnknown",
		1: "ClassDruid",
		2: "ClassHunter",
		3: "ClassMage",
		4: "ClassPaladin",
		5: "ClassPriest",
		6: "ClassRogue",
		7: "ClassShaman",
		8: "ClassWarlock",
		9: "ClassWarrior",
	}
	Class_value = map[string]int32{
		"ClassUnknown": 0,
		"ClassDruid":   1,
		"ClassHunter":  2,
		"ClassMage":    3,
		"ClassPaladin": 4,
		"ClassPriest":  5,
		"ClassRogue":   6,
		"ClassShaman":  7,
		"ClassWarlock": 8,
		"ClassWarrior": 9,
	}
)

func (x Class) Enum() *Class {
	p := new(Class)
	*p = x
	return p
}

func (x Class) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Class) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[1].Descriptor()
}

func (Class) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[1]
}

func (x Class) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Class.Descriptor instead.
func (Class) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

type Spec int32

const (
	Spec_SpecBalanceDruid    Spec = 0
	Spec_SpecElementalShaman Spec = 1
)

// Enum value maps for Spec.
var (
	Spec_name = map[int32]string{
		0: "SpecBalanceDruid",
		1: "SpecElementalShaman",
	}
	Spec_value = map[string]int32{
		"SpecBalanceDruid":    0,
		"SpecElementalShaman": 1,
	}
)

func (x Spec) Enum() *Spec {
	p := new(Spec)
	*p = x
	return p
}

func (x Spec) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Spec) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[2].Descriptor()
}

func (Spec) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[2]
}

func (x Spec) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Spec.Descriptor instead.
func (Spec) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type Stat int32

const (
	Stat_StatStrength         Stat = 0
	Stat_StatAgility          Stat = 1
	Stat_StatStamina          Stat = 2
	Stat_StatIntellect        Stat = 3
	Stat_StatSpirit           Stat = 4
	Stat_StatSpellPower       Stat = 5
	Stat_StatHealingPower     Stat = 6
	Stat_StatArcaneSpellPower Stat = 7
	Stat_StatFireSpellPower   Stat = 8
	Stat_StatFrostSpellPower  Stat = 9
	Stat_StatHolySpellPower   Stat = 10
	Stat_StatNatureSpellPower Stat = 11
	Stat_StatShadowSpellPower Stat = 12
	Stat_StatMP5              Stat = 13
	Stat_StatSpellHit         Stat = 14
	Stat_StatSpellCrit        Stat = 15
	Stat_StatSpellHaste       Stat = 16
	Stat_StatSpellPenetration Stat = 17
	Stat_StatAttackPower      Stat = 18
	Stat_StatMeleeHit         Stat = 19
	Stat_StatMeleeCrit        Stat = 20
	Stat_StatMeleeHaste       Stat = 21
	Stat_StatArmorPenetration Stat = 22
	Stat_StatExpertise        Stat = 23
	Stat_StatMana             Stat = 24
	Stat_StatEnergy           Stat = 25
	Stat_StatRage             Stat = 26
	Stat_StatArmor            Stat = 27
)

// Enum value maps for Stat.
var (
	Stat_name = map[int32]string{
		0:  "StatStrength",
		1:  "StatAgility",
		2:  "StatStamina",
		3:  "StatIntellect",
		4:  "StatSpirit",
		5:  "StatSpellPower",
		6:  "StatHealingPower",
		7:  "StatArcaneSpellPower",
		8:  "StatFireSpellPower",
		9:  "StatFrostSpellPower",
		10: "StatHolySpellPower",
		11: "StatNatureSpellPower",
		12: "StatShadowSpellPower",
		13: "StatMP5",
		14: "StatSpellHit",
		15: "StatSpellCrit",
		16: "StatSpellHaste",
		17: "StatSpellPenetration",
		18: "StatAttackPower",
		19: "StatMeleeHit",
		20: "StatMeleeCrit",
		21: "StatMeleeHaste",
		22: "StatArmorPenetration",
		23: "StatExpertise",
		24: "StatMana",
		25: "StatEnergy",
		26: "StatRage",
		27: "StatArmor",
	}
	Stat_value = map[string]int32{
		"StatStrength":         0,
		"StatAgility":          1,
		"StatStamina":          2,
		"StatIntellect":        3,
		"StatSpirit":           4,
		"StatSpellPower":       5,
		"StatHealingPower":     6,
		"StatArcaneSpellPower": 7,
		"StatFireSpellPower":   8,
		"StatFrostSpellPower":  9,
		"StatHolySpellPower":   10,
		"StatNatureSpellPower": 11,
		"StatShadowSpellPower": 12,
		"StatMP5":              13,
		"StatSpellHit":         14,
		"StatSpellCrit":        15,
		"StatSpellHaste":       16,
		"StatSpellPenetration": 17,
		"StatAttackPower":      18,
		"StatMeleeHit":         19,
		"StatMeleeCrit":        20,
		"StatMeleeHaste":       21,
		"StatArmorPenetration": 22,
		"StatExpertise":        23,
		"StatMana":             24,
		"StatEnergy":           25,
		"StatRage":             26,
		"StatArmor":            27,
	}
)

func (x Stat) Enum() *Stat {
	p := new(Stat)
	*p = x
	return p
}

func (x Stat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Stat) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[3].Descriptor()
}

func (Stat) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[3]
}

func (x Stat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Stat.Descriptor instead.
func (Stat) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

type ItemType int32

const (
	ItemType_ItemTypeUnknown  ItemType = 0
	ItemType_ItemTypeHead     ItemType = 1
	ItemType_ItemTypeNeck     ItemType = 2
	ItemType_ItemTypeShoulder ItemType = 3
	ItemType_ItemTypeBack     ItemType = 4
	ItemType_ItemTypeChest    ItemType = 5
	ItemType_ItemTypeWrist    ItemType = 6
	ItemType_ItemTypeHands    ItemType = 7
	ItemType_ItemTypeWaist    ItemType = 8
	ItemType_ItemTypeLegs     ItemType = 9
	ItemType_ItemTypeFeet     ItemType = 10
	ItemType_ItemTypeFinger   ItemType = 11
	ItemType_ItemTypeTrinket  ItemType = 12
	ItemType_ItemTypeWeapon   ItemType = 13
	ItemType_ItemTypeRanged   ItemType = 14
)

// Enum value maps for ItemType.
var (
	ItemType_name = map[int32]string{
		0:  "ItemTypeUnknown",
		1:  "ItemTypeHead",
		2:  "ItemTypeNeck",
		3:  "ItemTypeShoulder",
		4:  "ItemTypeBack",
		5:  "ItemTypeChest",
		6:  "ItemTypeWrist",
		7:  "ItemTypeHands",
		8:  "ItemTypeWaist",
		9:  "ItemTypeLegs",
		10: "ItemTypeFeet",
		11: "ItemTypeFinger",
		12: "ItemTypeTrinket",
		13: "ItemTypeWeapon",
		14: "ItemTypeRanged",
	}
	ItemType_value = map[string]int32{
		"ItemTypeUnknown":  0,
		"ItemTypeHead":     1,
		"ItemTypeNeck":     2,
		"ItemTypeShoulder": 3,
		"ItemTypeBack":     4,
		"ItemTypeChest":    5,
		"ItemTypeWrist":    6,
		"ItemTypeHands":    7,
		"ItemTypeWaist":    8,
		"ItemTypeLegs":     9,
		"ItemTypeFeet":     10,
		"ItemTypeFinger":   11,
		"ItemTypeTrinket":  12,
		"ItemTypeWeapon":   13,
		"ItemTypeRanged":   14,
	}
)

func (x ItemType) Enum() *ItemType {
	p := new(ItemType)
	*p = x
	return p
}

func (x ItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[4].Descriptor()
}

func (ItemType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[4]
}

func (x ItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemType.Descriptor instead.
func (ItemType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

type ArmorType int32

const (
	ArmorType_ArmorTypeUnknown ArmorType = 0
	ArmorType_ArmorTypeCloth   ArmorType = 1
	ArmorType_ArmorTypeLeather ArmorType = 2
	ArmorType_ArmorTypeMail    ArmorType = 3
	ArmorType_ArmorTypePlate   ArmorType = 4
)

// Enum value maps for ArmorType.
var (
	ArmorType_name = map[int32]string{
		0: "ArmorTypeUnknown",
		1: "ArmorTypeCloth",
		2: "ArmorTypeLeather",
		3: "ArmorTypeMail",
		4: "ArmorTypePlate",
	}
	ArmorType_value = map[string]int32{
		"ArmorTypeUnknown": 0,
		"ArmorTypeCloth":   1,
		"ArmorTypeLeather": 2,
		"ArmorTypeMail":    3,
		"ArmorTypePlate":   4,
	}
)

func (x ArmorType) Enum() *ArmorType {
	p := new(ArmorType)
	*p = x
	return p
}

func (x ArmorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArmorType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[5].Descriptor()
}

func (ArmorType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[5]
}

func (x ArmorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArmorType.Descriptor instead.
func (ArmorType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

type WeaponType int32

const (
	WeaponType_WeaponTypeUnknown WeaponType = 0
	WeaponType_WeaponTypeAxe     WeaponType = 1
	WeaponType_WeaponTypeDagger  WeaponType = 2
	WeaponType_WeaponTypeFist    WeaponType = 3
	WeaponType_WeaponTypeMace    WeaponType = 4
	WeaponType_WeaponTypeOffHand WeaponType = 5
	WeaponType_WeaponTypePolearm WeaponType = 6
	WeaponType_WeaponTypeShield  WeaponType = 7
	WeaponType_WeaponTypeStaff   WeaponType = 8
	WeaponType_WeaponTypeSword   WeaponType = 9
)

// Enum value maps for WeaponType.
var (
	WeaponType_name = map[int32]string{
		0: "WeaponTypeUnknown",
		1: "WeaponTypeAxe",
		2: "WeaponTypeDagger",
		3: "WeaponTypeFist",
		4: "WeaponTypeMace",
		5: "WeaponTypeOffHand",
		6: "WeaponTypePolearm",
		7: "WeaponTypeShield",
		8: "WeaponTypeStaff",
		9: "WeaponTypeSword",
	}
	WeaponType_value = map[string]int32{
		"WeaponTypeUnknown": 0,
		"WeaponTypeAxe":     1,
		"WeaponTypeDagger":  2,
		"WeaponTypeFist":    3,
		"WeaponTypeMace":    4,
		"WeaponTypeOffHand": 5,
		"WeaponTypePolearm": 6,
		"WeaponTypeShield":  7,
		"WeaponTypeStaff":   8,
		"WeaponTypeSword":   9,
	}
)

func (x WeaponType) Enum() *WeaponType {
	p := new(WeaponType)
	*p = x
	return p
}

func (x WeaponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeaponType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[6].Descriptor()
}

func (WeaponType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[6]
}

func (x WeaponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeaponType.Descriptor instead.
func (WeaponType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

type HandType int32

const (
	HandType_HandTypeUnknown  HandType = 0
	HandType_HandTypeMainHand HandType = 1
	HandType_HandTypeOneHand  HandType = 2
	HandType_HandTypeOffHand  HandType = 3
	HandType_HandTypeTwoHand  HandType = 4
)

// Enum value maps for HandType.
var (
	HandType_name = map[int32]string{
		0: "HandTypeUnknown",
		1: "HandTypeMainHand",
		2: "HandTypeOneHand",
		3: "HandTypeOffHand",
		4: "HandTypeTwoHand",
	}
	HandType_value = map[string]int32{
		"HandTypeUnknown":  0,
		"HandTypeMainHand": 1,
		"HandTypeOneHand":  2,
		"HandTypeOffHand":  3,
		"HandTypeTwoHand":  4,
	}
)

func (x HandType) Enum() *HandType {
	p := new(HandType)
	*p = x
	return p
}

func (x HandType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HandType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[7].Descriptor()
}

func (HandType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[7]
}

func (x HandType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HandType.Descriptor instead.
func (HandType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

type RangedWeaponType int32

const (
	RangedWeaponType_RangedWeaponTypeUnknown  RangedWeaponType = 0
	RangedWeaponType_RangedWeaponTypeBow      RangedWeaponType = 1
	RangedWeaponType_RangedWeaponTypeCrossbow RangedWeaponType = 2
	RangedWeaponType_RangedWeaponTypeGun      RangedWeaponType = 3
	RangedWeaponType_RangedWeaponTypeIdol     RangedWeaponType = 4
	RangedWeaponType_RangedWeaponTypeLibram   RangedWeaponType = 5
	RangedWeaponType_RangedWeaponTypeThrown   RangedWeaponType = 6
	RangedWeaponType_RangedWeaponTypeTotem    RangedWeaponType = 7
	RangedWeaponType_RangedWeaponTypeWand     RangedWeaponType = 8
)

// Enum value maps for RangedWeaponType.
var (
	RangedWeaponType_name = map[int32]string{
		0: "RangedWeaponTypeUnknown",
		1: "RangedWeaponTypeBow",
		2: "RangedWeaponTypeCrossbow",
		3: "RangedWeaponTypeGun",
		4: "RangedWeaponTypeIdol",
		5: "RangedWeaponTypeLibram",
		6: "RangedWeaponTypeThrown",
		7: "RangedWeaponTypeTotem",
		8: "RangedWeaponTypeWand",
	}
	RangedWeaponType_value = map[string]int32{
		"RangedWeaponTypeUnknown":  0,
		"RangedWeaponTypeBow":      1,
		"RangedWeaponTypeCrossbow": 2,
		"RangedWeaponTypeGun":      3,
		"RangedWeaponTypeIdol":     4,
		"RangedWeaponTypeLibram":   5,
		"RangedWeaponTypeThrown":   6,
		"RangedWeaponTypeTotem":    7,
		"RangedWeaponTypeWand":     8,
	}
)

func (x RangedWeaponType) Enum() *RangedWeaponType {
	p := new(RangedWeaponType)
	*p = x
	return p
}

func (x RangedWeaponType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RangedWeaponType) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[8].Descriptor()
}

func (RangedWeaponType) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[8]
}

func (x RangedWeaponType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RangedWeaponType.Descriptor instead.
func (RangedWeaponType) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

// All slots on the gear menu where a single item can be worn.
type ItemSlot int32

const (
	ItemSlot_ItemSlotHead     ItemSlot = 0
	ItemSlot_ItemSlotNeck     ItemSlot = 1
	ItemSlot_ItemSlotShoulder ItemSlot = 2
	ItemSlot_ItemSlotBack     ItemSlot = 3
	ItemSlot_ItemSlotChest    ItemSlot = 4
	ItemSlot_ItemSlotWrist    ItemSlot = 5
	ItemSlot_ItemSlotHands    ItemSlot = 6
	ItemSlot_ItemSlotWaist    ItemSlot = 7
	ItemSlot_ItemSlotLegs     ItemSlot = 8
	ItemSlot_ItemSlotFeet     ItemSlot = 9
	ItemSlot_ItemSlotFinger1  ItemSlot = 10
	ItemSlot_ItemSlotFinger2  ItemSlot = 11
	ItemSlot_ItemSlotTrinket1 ItemSlot = 12
	ItemSlot_ItemSlotTrinket2 ItemSlot = 13
	ItemSlot_ItemSlotMainHand ItemSlot = 14 // can be 1h or 2h
	ItemSlot_ItemSlotOffHand  ItemSlot = 15
	ItemSlot_ItemSlotRanged   ItemSlot = 16
)

// Enum value maps for ItemSlot.
var (
	ItemSlot_name = map[int32]string{
		0:  "ItemSlotHead",
		1:  "ItemSlotNeck",
		2:  "ItemSlotShoulder",
		3:  "ItemSlotBack",
		4:  "ItemSlotChest",
		5:  "ItemSlotWrist",
		6:  "ItemSlotHands",
		7:  "ItemSlotWaist",
		8:  "ItemSlotLegs",
		9:  "ItemSlotFeet",
		10: "ItemSlotFinger1",
		11: "ItemSlotFinger2",
		12: "ItemSlotTrinket1",
		13: "ItemSlotTrinket2",
		14: "ItemSlotMainHand",
		15: "ItemSlotOffHand",
		16: "ItemSlotRanged",
	}
	ItemSlot_value = map[string]int32{
		"ItemSlotHead":     0,
		"ItemSlotNeck":     1,
		"ItemSlotShoulder": 2,
		"ItemSlotBack":     3,
		"ItemSlotChest":    4,
		"ItemSlotWrist":    5,
		"ItemSlotHands":    6,
		"ItemSlotWaist":    7,
		"ItemSlotLegs":     8,
		"ItemSlotFeet":     9,
		"ItemSlotFinger1":  10,
		"ItemSlotFinger2":  11,
		"ItemSlotTrinket1": 12,
		"ItemSlotTrinket2": 13,
		"ItemSlotMainHand": 14,
		"ItemSlotOffHand":  15,
		"ItemSlotRanged":   16,
	}
)

func (x ItemSlot) Enum() *ItemSlot {
	p := new(ItemSlot)
	*p = x
	return p
}

func (x ItemSlot) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemSlot) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[9].Descriptor()
}

func (ItemSlot) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[9]
}

func (x ItemSlot) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemSlot.Descriptor instead.
func (ItemSlot) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

type ItemQuality int32

const (
	ItemQuality_ItemQualityJunk      ItemQuality = 0
	ItemQuality_ItemQualityCommon    ItemQuality = 1
	ItemQuality_ItemQualityUncommon  ItemQuality = 2
	ItemQuality_ItemQualityRare      ItemQuality = 3
	ItemQuality_ItemQualityEpic      ItemQuality = 4
	ItemQuality_ItemQualityLegendary ItemQuality = 5
)

// Enum value maps for ItemQuality.
var (
	ItemQuality_name = map[int32]string{
		0: "ItemQualityJunk",
		1: "ItemQualityCommon",
		2: "ItemQualityUncommon",
		3: "ItemQualityRare",
		4: "ItemQualityEpic",
		5: "ItemQualityLegendary",
	}
	ItemQuality_value = map[string]int32{
		"ItemQualityJunk":      0,
		"ItemQualityCommon":    1,
		"ItemQualityUncommon":  2,
		"ItemQualityRare":      3,
		"ItemQualityEpic":      4,
		"ItemQualityLegendary": 5,
	}
)

func (x ItemQuality) Enum() *ItemQuality {
	p := new(ItemQuality)
	*p = x
	return p
}

func (x ItemQuality) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ItemQuality) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[10].Descriptor()
}

func (ItemQuality) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[10]
}

func (x ItemQuality) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ItemQuality.Descriptor instead.
func (ItemQuality) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

type GemColor int32

const (
	GemColor_GemColorUnknown   GemColor = 0
	GemColor_GemColorMeta      GemColor = 1
	GemColor_GemColorRed       GemColor = 2
	GemColor_GemColorBlue      GemColor = 3
	GemColor_GemColorYellow    GemColor = 4
	GemColor_GemColorGreen     GemColor = 5
	GemColor_GemColorOrange    GemColor = 6
	GemColor_GemColorPurple    GemColor = 7
	GemColor_GemColorPrismatic GemColor = 8
)

// Enum value maps for GemColor.
var (
	GemColor_name = map[int32]string{
		0: "GemColorUnknown",
		1: "GemColorMeta",
		2: "GemColorRed",
		3: "GemColorBlue",
		4: "GemColorYellow",
		5: "GemColorGreen",
		6: "GemColorOrange",
		7: "GemColorPurple",
		8: "GemColorPrismatic",
	}
	GemColor_value = map[string]int32{
		"GemColorUnknown":   0,
		"GemColorMeta":      1,
		"GemColorRed":       2,
		"GemColorBlue":      3,
		"GemColorYellow":    4,
		"GemColorGreen":     5,
		"GemColorOrange":    6,
		"GemColorPurple":    7,
		"GemColorPrismatic": 8,
	}
)

func (x GemColor) Enum() *GemColor {
	p := new(GemColor)
	*p = x
	return p
}

func (x GemColor) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GemColor) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[11].Descriptor()
}

func (GemColor) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[11]
}

func (x GemColor) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GemColor.Descriptor instead.
func (GemColor) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

type TristateEffect int32

const (
	TristateEffect_TristateEffectMissing  TristateEffect = 0
	TristateEffect_TristateEffectRegular  TristateEffect = 1
	TristateEffect_TristateEffectImproved TristateEffect = 2
)

// Enum value maps for TristateEffect.
var (
	TristateEffect_name = map[int32]string{
		0: "TristateEffectMissing",
		1: "TristateEffectRegular",
		2: "TristateEffectImproved",
	}
	TristateEffect_value = map[string]int32{
		"TristateEffectMissing":  0,
		"TristateEffectRegular":  1,
		"TristateEffectImproved": 2,
	}
)

func (x TristateEffect) Enum() *TristateEffect {
	p := new(TristateEffect)
	*p = x
	return p
}

func (x TristateEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TristateEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_common_proto_enumTypes[12].Descriptor()
}

func (TristateEffect) Type() protoreflect.EnumType {
	return &file_common_proto_enumTypes[12]
}

func (x TristateEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TristateEffect.Descriptor instead.
func (TristateEffect) EnumDescriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

type Buffs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raid buffs
	ArcaneBrilliance bool           `protobuf:"varint,1,opt,name=arcane_brilliance,json=arcaneBrilliance,proto3" json:"arcane_brilliance,omitempty"`
	BlessingOfKings  bool           `protobuf:"varint,2,opt,name=blessing_of_kings,json=blessingOfKings,proto3" json:"blessing_of_kings,omitempty"`
	BlessingOfWisdom TristateEffect `protobuf:"varint,3,opt,name=blessing_of_wisdom,json=blessingOfWisdom,proto3,enum=api.TristateEffect" json:"blessing_of_wisdom,omitempty"`
	DivineSpirit     TristateEffect `protobuf:"varint,4,opt,name=divine_spirit,json=divineSpirit,proto3,enum=api.TristateEffect" json:"divine_spirit,omitempty"`
	GiftOfTheWild    TristateEffect `protobuf:"varint,5,opt,name=gift_of_the_wild,json=giftOfTheWild,proto3,enum=api.TristateEffect" json:"gift_of_the_wild,omitempty"`
	// Party Buffs
	Bloodlust       int32          `protobuf:"varint,6,opt,name=bloodlust,proto3" json:"bloodlust,omitempty"`
	MoonkinAura     TristateEffect `protobuf:"varint,7,opt,name=moonkin_aura,json=moonkinAura,proto3,enum=api.TristateEffect" json:"moonkin_aura,omitempty"`
	ShadowPriestDps int32          `protobuf:"varint,8,opt,name=shadow_priest_dps,json=shadowPriestDps,proto3" json:"shadow_priest_dps,omitempty"`
	// Target Debuff
	JudgementOfWisdom         bool `protobuf:"varint,9,opt,name=judgement_of_wisdom,json=judgementOfWisdom,proto3" json:"judgement_of_wisdom,omitempty"`
	ImprovedSealOfTheCrusader bool `protobuf:"varint,10,opt,name=improved_seal_of_the_crusader,json=improvedSealOfTheCrusader,proto3" json:"improved_seal_of_the_crusader,omitempty"`
	Misery                    bool `protobuf:"varint,11,opt,name=misery,proto3" json:"misery,omitempty"`
	// Item Buffs
	EyeOfTheNight         bool `protobuf:"varint,12,opt,name=eye_of_the_night,json=eyeOfTheNight,proto3" json:"eye_of_the_night,omitempty"`
	ChainOfTheTwilightOwl bool `protobuf:"varint,13,opt,name=chain_of_the_twilight_owl,json=chainOfTheTwilightOwl,proto3" json:"chain_of_the_twilight_owl,omitempty"`
	JadePendantOfBlasting bool `protobuf:"varint,14,opt,name=jade_pendant_of_blasting,json=jadePendantOfBlasting,proto3" json:"jade_pendant_of_blasting,omitempty"`
	// Totems
	ManaSpringTotem TristateEffect `protobuf:"varint,15,opt,name=mana_spring_totem,json=manaSpringTotem,proto3,enum=api.TristateEffect" json:"mana_spring_totem,omitempty"`
	ManaTideTotem   bool           `protobuf:"varint,16,opt,name=mana_tide_totem,json=manaTideTotem,proto3" json:"mana_tide_totem,omitempty"`
	TotemOfWrath    int32          `protobuf:"varint,17,opt,name=totem_of_wrath,json=totemOfWrath,proto3" json:"totem_of_wrath,omitempty"`
	WrathOfAirTotem TristateEffect `protobuf:"varint,18,opt,name=wrath_of_air_totem,json=wrathOfAirTotem,proto3,enum=api.TristateEffect" json:"wrath_of_air_totem,omitempty"`
}

func (x *Buffs) Reset() {
	*x = Buffs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Buffs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Buffs) ProtoMessage() {}

func (x *Buffs) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Buffs.ProtoReflect.Descriptor instead.
func (*Buffs) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Buffs) GetArcaneBrilliance() bool {
	if x != nil {
		return x.ArcaneBrilliance
	}
	return false
}

func (x *Buffs) GetBlessingOfKings() bool {
	if x != nil {
		return x.BlessingOfKings
	}
	return false
}

func (x *Buffs) GetBlessingOfWisdom() TristateEffect {
	if x != nil {
		return x.BlessingOfWisdom
	}
	return TristateEffect_TristateEffectMissing
}

func (x *Buffs) GetDivineSpirit() TristateEffect {
	if x != nil {
		return x.DivineSpirit
	}
	return TristateEffect_TristateEffectMissing
}

func (x *Buffs) GetGiftOfTheWild() TristateEffect {
	if x != nil {
		return x.GiftOfTheWild
	}
	return TristateEffect_TristateEffectMissing
}

func (x *Buffs) GetBloodlust() int32 {
	if x != nil {
		return x.Bloodlust
	}
	return 0
}

func (x *Buffs) GetMoonkinAura() TristateEffect {
	if x != nil {
		return x.MoonkinAura
	}
	return TristateEffect_TristateEffectMissing
}

func (x *Buffs) GetShadowPriestDps() int32 {
	if x != nil {
		return x.ShadowPriestDps
	}
	return 0
}

func (x *Buffs) GetJudgementOfWisdom() bool {
	if x != nil {
		return x.JudgementOfWisdom
	}
	return false
}

func (x *Buffs) GetImprovedSealOfTheCrusader() bool {
	if x != nil {
		return x.ImprovedSealOfTheCrusader
	}
	return false
}

func (x *Buffs) GetMisery() bool {
	if x != nil {
		return x.Misery
	}
	return false
}

func (x *Buffs) GetEyeOfTheNight() bool {
	if x != nil {
		return x.EyeOfTheNight
	}
	return false
}

func (x *Buffs) GetChainOfTheTwilightOwl() bool {
	if x != nil {
		return x.ChainOfTheTwilightOwl
	}
	return false
}

func (x *Buffs) GetJadePendantOfBlasting() bool {
	if x != nil {
		return x.JadePendantOfBlasting
	}
	return false
}

func (x *Buffs) GetManaSpringTotem() TristateEffect {
	if x != nil {
		return x.ManaSpringTotem
	}
	return TristateEffect_TristateEffectMissing
}

func (x *Buffs) GetManaTideTotem() bool {
	if x != nil {
		return x.ManaTideTotem
	}
	return false
}

func (x *Buffs) GetTotemOfWrath() int32 {
	if x != nil {
		return x.TotemOfWrath
	}
	return 0
}

func (x *Buffs) GetWrathOfAirTotem() TristateEffect {
	if x != nil {
		return x.WrathOfAirTotem
	}
	return TristateEffect_TristateEffectMissing
}

type Consumes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlaskOfBlindingLight     bool `protobuf:"varint,1,opt,name=flask_of_blinding_light,json=flaskOfBlindingLight,proto3" json:"flask_of_blinding_light,omitempty"`
	FlaskOfMightyRestoration bool `protobuf:"varint,2,opt,name=flask_of_mighty_restoration,json=flaskOfMightyRestoration,proto3" json:"flask_of_mighty_restoration,omitempty"`
	FlaskOfPureDeath         bool `protobuf:"varint,3,opt,name=flask_of_pure_death,json=flaskOfPureDeath,proto3" json:"flask_of_pure_death,omitempty"`
	FlaskOfSupremePower      bool `protobuf:"varint,4,opt,name=flask_of_supreme_power,json=flaskOfSupremePower,proto3" json:"flask_of_supreme_power,omitempty"`
	AdeptsElixir             bool `protobuf:"varint,5,opt,name=adepts_elixir,json=adeptsElixir,proto3" json:"adepts_elixir,omitempty"`
	ElixirOfMajorFirePower   bool `protobuf:"varint,6,opt,name=elixir_of_major_fire_power,json=elixirOfMajorFirePower,proto3" json:"elixir_of_major_fire_power,omitempty"`
	ElixirOfMajorFrostPower  bool `protobuf:"varint,7,opt,name=elixir_of_major_frost_power,json=elixirOfMajorFrostPower,proto3" json:"elixir_of_major_frost_power,omitempty"`
	ElixirOfMajorShadowPower bool `protobuf:"varint,8,opt,name=elixir_of_major_shadow_power,json=elixirOfMajorShadowPower,proto3" json:"elixir_of_major_shadow_power,omitempty"`
	ElixirOfDraenicWisdom    bool `protobuf:"varint,9,opt,name=elixir_of_draenic_wisdom,json=elixirOfDraenicWisdom,proto3" json:"elixir_of_draenic_wisdom,omitempty"`
	ElixirOfMajorMageblood   bool `protobuf:"varint,10,opt,name=elixir_of_major_mageblood,json=elixirOfMajorMageblood,proto3" json:"elixir_of_major_mageblood,omitempty"`
	BrilliantWizardOil       bool `protobuf:"varint,11,opt,name=brilliant_wizard_oil,json=brilliantWizardOil,proto3" json:"brilliant_wizard_oil,omitempty"`
	SuperiorWizardOil        bool `protobuf:"varint,12,opt,name=superior_wizard_oil,json=superiorWizardOil,proto3" json:"superior_wizard_oil,omitempty"`
	BlackenedBasilisk        bool `protobuf:"varint,13,opt,name=blackened_basilisk,json=blackenedBasilisk,proto3" json:"blackened_basilisk,omitempty"`
	SkullfishSoup            bool `protobuf:"varint,14,opt,name=skullfish_soup,json=skullfishSoup,proto3" json:"skullfish_soup,omitempty"`
	DestructionPotion        bool `protobuf:"varint,15,opt,name=destruction_potion,json=destructionPotion,proto3" json:"destruction_potion,omitempty"`
	SuperManaPotion          bool `protobuf:"varint,16,opt,name=super_mana_potion,json=superManaPotion,proto3" json:"super_mana_potion,omitempty"`
	DarkRune                 bool `protobuf:"varint,17,opt,name=dark_rune,json=darkRune,proto3" json:"dark_rune,omitempty"`
	DrumsOfBattle            bool `protobuf:"varint,18,opt,name=drums_of_battle,json=drumsOfBattle,proto3" json:"drums_of_battle,omitempty"`
	DrumsOfRestoration       bool `protobuf:"varint,19,opt,name=drums_of_restoration,json=drumsOfRestoration,proto3" json:"drums_of_restoration,omitempty"`
}

func (x *Consumes) Reset() {
	*x = Consumes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Consumes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Consumes) ProtoMessage() {}

func (x *Consumes) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Consumes.ProtoReflect.Descriptor instead.
func (*Consumes) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *Consumes) GetFlaskOfBlindingLight() bool {
	if x != nil {
		return x.FlaskOfBlindingLight
	}
	return false
}

func (x *Consumes) GetFlaskOfMightyRestoration() bool {
	if x != nil {
		return x.FlaskOfMightyRestoration
	}
	return false
}

func (x *Consumes) GetFlaskOfPureDeath() bool {
	if x != nil {
		return x.FlaskOfPureDeath
	}
	return false
}

func (x *Consumes) GetFlaskOfSupremePower() bool {
	if x != nil {
		return x.FlaskOfSupremePower
	}
	return false
}

func (x *Consumes) GetAdeptsElixir() bool {
	if x != nil {
		return x.AdeptsElixir
	}
	return false
}

func (x *Consumes) GetElixirOfMajorFirePower() bool {
	if x != nil {
		return x.ElixirOfMajorFirePower
	}
	return false
}

func (x *Consumes) GetElixirOfMajorFrostPower() bool {
	if x != nil {
		return x.ElixirOfMajorFrostPower
	}
	return false
}

func (x *Consumes) GetElixirOfMajorShadowPower() bool {
	if x != nil {
		return x.ElixirOfMajorShadowPower
	}
	return false
}

func (x *Consumes) GetElixirOfDraenicWisdom() bool {
	if x != nil {
		return x.ElixirOfDraenicWisdom
	}
	return false
}

func (x *Consumes) GetElixirOfMajorMageblood() bool {
	if x != nil {
		return x.ElixirOfMajorMageblood
	}
	return false
}

func (x *Consumes) GetBrilliantWizardOil() bool {
	if x != nil {
		return x.BrilliantWizardOil
	}
	return false
}

func (x *Consumes) GetSuperiorWizardOil() bool {
	if x != nil {
		return x.SuperiorWizardOil
	}
	return false
}

func (x *Consumes) GetBlackenedBasilisk() bool {
	if x != nil {
		return x.BlackenedBasilisk
	}
	return false
}

func (x *Consumes) GetSkullfishSoup() bool {
	if x != nil {
		return x.SkullfishSoup
	}
	return false
}

func (x *Consumes) GetDestructionPotion() bool {
	if x != nil {
		return x.DestructionPotion
	}
	return false
}

func (x *Consumes) GetSuperManaPotion() bool {
	if x != nil {
		return x.SuperManaPotion
	}
	return false
}

func (x *Consumes) GetDarkRune() bool {
	if x != nil {
		return x.DarkRune
	}
	return false
}

func (x *Consumes) GetDrumsOfBattle() bool {
	if x != nil {
		return x.DrumsOfBattle
	}
	return false
}

func (x *Consumes) GetDrumsOfRestoration() bool {
	if x != nil {
		return x.DrumsOfRestoration
	}
	return false
}

type Encounter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration    float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty"`
	NumTargets  int32   `protobuf:"varint,2,opt,name=num_targets,json=numTargets,proto3" json:"num_targets,omitempty"`
	TargetArmor int32   `protobuf:"varint,3,opt,name=target_armor,json=targetArmor,proto3" json:"target_armor,omitempty"`
}

func (x *Encounter) Reset() {
	*x = Encounter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Encounter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Encounter) ProtoMessage() {}

func (x *Encounter) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Encounter.ProtoReflect.Descriptor instead.
func (*Encounter) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *Encounter) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *Encounter) GetNumTargets() int32 {
	if x != nil {
		return x.NumTargets
	}
	return 0
}

func (x *Encounter) GetTargetArmor() int32 {
	if x != nil {
		return x.TargetArmor
	}
	return 0
}

type ItemSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Enchant int32   `protobuf:"varint,3,opt,name=enchant,proto3" json:"enchant,omitempty"`
	Gems    []int32 `protobuf:"varint,4,rep,packed,name=gems,proto3" json:"gems,omitempty"`
}

func (x *ItemSpec) Reset() {
	*x = ItemSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ItemSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItemSpec) ProtoMessage() {}

func (x *ItemSpec) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItemSpec.ProtoReflect.Descriptor instead.
func (*ItemSpec) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *ItemSpec) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ItemSpec) GetEnchant() int32 {
	if x != nil {
		return x.Enchant
	}
	return 0
}

func (x *ItemSpec) GetGems() []int32 {
	if x != nil {
		return x.Gems
	}
	return nil
}

type EquipmentSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ItemSpec `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *EquipmentSpec) Reset() {
	*x = EquipmentSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EquipmentSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EquipmentSpec) ProtoMessage() {}

func (x *EquipmentSpec) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EquipmentSpec.ProtoReflect.Descriptor instead.
func (*EquipmentSpec) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *EquipmentSpec) GetItems() []*ItemSpec {
	if x != nil {
		return x.Items
	}
	return nil
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type             ItemType         `protobuf:"varint,3,opt,name=type,proto3,enum=api.ItemType" json:"type,omitempty"`
	ArmorType        ArmorType        `protobuf:"varint,4,opt,name=armor_type,json=armorType,proto3,enum=api.ArmorType" json:"armor_type,omitempty"`
	WeaponType       WeaponType       `protobuf:"varint,5,opt,name=weapon_type,json=weaponType,proto3,enum=api.WeaponType" json:"weapon_type,omitempty"`
	HandType         HandType         `protobuf:"varint,6,opt,name=hand_type,json=handType,proto3,enum=api.HandType" json:"hand_type,omitempty"`
	RangedWeaponType RangedWeaponType `protobuf:"varint,7,opt,name=ranged_weapon_type,json=rangedWeaponType,proto3,enum=api.RangedWeaponType" json:"ranged_weapon_type,omitempty"`
	Stats            []float64        `protobuf:"fixed64,8,rep,packed,name=stats,proto3" json:"stats,omitempty"`
	GemSockets       []GemColor       `protobuf:"varint,11,rep,packed,name=gem_sockets,json=gemSockets,proto3,enum=api.GemColor" json:"gem_sockets,omitempty"`
	Phase            int32            `protobuf:"varint,9,opt,name=phase,proto3" json:"phase,omitempty"`
	Quality          ItemQuality      `protobuf:"varint,10,opt,name=quality,proto3,enum=api.ItemQuality" json:"quality,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *Item) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Item) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Item) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ItemTypeUnknown
}

func (x *Item) GetArmorType() ArmorType {
	if x != nil {
		return x.ArmorType
	}
	return ArmorType_ArmorTypeUnknown
}

func (x *Item) GetWeaponType() WeaponType {
	if x != nil {
		return x.WeaponType
	}
	return WeaponType_WeaponTypeUnknown
}

func (x *Item) GetHandType() HandType {
	if x != nil {
		return x.HandType
	}
	return HandType_HandTypeUnknown
}

func (x *Item) GetRangedWeaponType() RangedWeaponType {
	if x != nil {
		return x.RangedWeaponType
	}
	return RangedWeaponType_RangedWeaponTypeUnknown
}

func (x *Item) GetStats() []float64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Item) GetGemSockets() []GemColor {
	if x != nil {
		return x.GemSockets
	}
	return nil
}

func (x *Item) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *Item) GetQuality() ItemQuality {
	if x != nil {
		return x.Quality
	}
	return ItemQuality_ItemQualityJunk
}

type Enchant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                             // ID of the enchant "item".
	EffectId      int32       `protobuf:"varint,2,opt,name=effect_id,json=effectId,proto3" json:"effect_id,omitempty"` // ID of the effect (for the item tooltip UI)
	Name          string      `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Type          ItemType    `protobuf:"varint,4,opt,name=type,proto3,enum=api.ItemType" json:"type,omitempty"` // Which type of item this enchant can be applied to.
	TwoHandedOnly bool        `protobuf:"varint,5,opt,name=two_handed_only,json=twoHandedOnly,proto3" json:"two_handed_only,omitempty"`
	ShieldOnly    bool        `protobuf:"varint,6,opt,name=shield_only,json=shieldOnly,proto3" json:"shield_only,omitempty"`
	Stats         []float64   `protobuf:"fixed64,7,rep,packed,name=stats,proto3" json:"stats,omitempty"`
	Quality       ItemQuality `protobuf:"varint,8,opt,name=quality,proto3,enum=api.ItemQuality" json:"quality,omitempty"`
}

func (x *Enchant) Reset() {
	*x = Enchant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enchant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enchant) ProtoMessage() {}

func (x *Enchant) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enchant.ProtoReflect.Descriptor instead.
func (*Enchant) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *Enchant) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Enchant) GetEffectId() int32 {
	if x != nil {
		return x.EffectId
	}
	return 0
}

func (x *Enchant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enchant) GetType() ItemType {
	if x != nil {
		return x.Type
	}
	return ItemType_ItemTypeUnknown
}

func (x *Enchant) GetTwoHandedOnly() bool {
	if x != nil {
		return x.TwoHandedOnly
	}
	return false
}

func (x *Enchant) GetShieldOnly() bool {
	if x != nil {
		return x.ShieldOnly
	}
	return false
}

func (x *Enchant) GetStats() []float64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Enchant) GetQuality() ItemQuality {
	if x != nil {
		return x.Quality
	}
	return ItemQuality_ItemQualityJunk
}

type Gem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      int32       `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name    string      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Stats   []float64   `protobuf:"fixed64,3,rep,packed,name=stats,proto3" json:"stats,omitempty"`
	Color   GemColor    `protobuf:"varint,4,opt,name=color,proto3,enum=api.GemColor" json:"color,omitempty"`
	Phase   int32       `protobuf:"varint,5,opt,name=phase,proto3" json:"phase,omitempty"`
	Quality ItemQuality `protobuf:"varint,6,opt,name=quality,proto3,enum=api.ItemQuality" json:"quality,omitempty"`
}

func (x *Gem) Reset() {
	*x = Gem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_common_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Gem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Gem) ProtoMessage() {}

func (x *Gem) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Gem.ProtoReflect.Descriptor instead.
func (*Gem) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *Gem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Gem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Gem) GetStats() []float64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Gem) GetColor() GemColor {
	if x != nil {
		return x.Color
	}
	return GemColor_GemColorUnknown
}

func (x *Gem) GetPhase() int32 {
	if x != nil {
		return x.Phase
	}
	return 0
}

func (x *Gem) GetQuality() ItemQuality {
	if x != nil {
		return x.Quality
	}
	return ItemQuality_ItemQualityJunk
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x61, 0x70, 0x69, 0x22, 0x94, 0x07, 0x0a, 0x05, 0x42, 0x75, 0x66, 0x66, 0x73, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x72, 0x63, 0x61, 0x6e, 0x65, 0x5f, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x72, 0x63, 0x61, 0x6e, 0x65,
	0x42, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x6c,
	0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x6b, 0x69, 0x6e, 0x67, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4f,
	0x66, 0x4b, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x41, 0x0a, 0x12, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x69, 0x73, 0x64, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x10, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x4f, 0x66, 0x57, 0x69, 0x73, 0x64, 0x6f, 0x6d, 0x12, 0x38, 0x0a, 0x0d, 0x64, 0x69, 0x76,
	0x69, 0x6e, 0x65, 0x5f, 0x73, 0x70, 0x69, 0x72, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x64, 0x69, 0x76, 0x69, 0x6e, 0x65, 0x53, 0x70, 0x69,
	0x72, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x10, 0x67, 0x69, 0x66, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x74,
	0x68, 0x65, 0x5f, 0x77, 0x69, 0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x52, 0x0d, 0x67, 0x69, 0x66, 0x74, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x57, 0x69, 0x6c,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x75, 0x73, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x6c, 0x75, 0x73, 0x74, 0x12,
	0x36, 0x0a, 0x0c, 0x6d, 0x6f, 0x6f, 0x6e, 0x6b, 0x69, 0x6e, 0x5f, 0x61, 0x75, 0x72, 0x61, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0b, 0x6d, 0x6f, 0x6f, 0x6e,
	0x6b, 0x69, 0x6e, 0x41, 0x75, 0x72, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x5f, 0x70, 0x72, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x69, 0x65, 0x73, 0x74,
	0x44, 0x70, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x69, 0x73, 0x64, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x6a, 0x75, 0x64, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x66, 0x57, 0x69, 0x73,
	0x64, 0x6f, 0x6d, 0x12, 0x40, 0x0a, 0x1d, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f,
	0x73, 0x65, 0x61, 0x6c, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x63, 0x72, 0x75, 0x73,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x69, 0x6d, 0x70, 0x72,
	0x6f, 0x76, 0x65, 0x64, 0x53, 0x65, 0x61, 0x6c, 0x4f, 0x66, 0x54, 0x68, 0x65, 0x43, 0x72, 0x75,
	0x73, 0x61, 0x64, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x69, 0x73, 0x65, 0x72, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x65, 0x72, 0x79, 0x12, 0x27, 0x0a,
	0x10, 0x65, 0x79, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x6e, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x79, 0x65, 0x4f, 0x66, 0x54, 0x68,
	0x65, 0x4e, 0x69, 0x67, 0x68, 0x74, 0x12, 0x38, 0x0a, 0x19, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x6f, 0x66, 0x5f, 0x74, 0x68, 0x65, 0x5f, 0x74, 0x77, 0x69, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x6f, 0x77, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x4f, 0x66, 0x54, 0x68, 0x65, 0x54, 0x77, 0x69, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x4f, 0x77, 0x6c,
	0x12, 0x37, 0x0a, 0x18, 0x6a, 0x61, 0x64, 0x65, 0x5f, 0x70, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74,
	0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x6a, 0x61, 0x64, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x4f,
	0x66, 0x42, 0x6c, 0x61, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x11, 0x6d, 0x61, 0x6e,
	0x61, 0x5f, 0x73, 0x70, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x53,
	0x70, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x65, 0x6d, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x6e, 0x61, 0x5f, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x54, 0x69, 0x64, 0x65, 0x54, 0x6f, 0x74,
	0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x77,
	0x72, 0x61, 0x74, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x65,
	0x6d, 0x4f, 0x66, 0x57, 0x72, 0x61, 0x74, 0x68, 0x12, 0x40, 0x0a, 0x12, 0x77, 0x72, 0x61, 0x74,
	0x68, 0x5f, 0x6f, 0x66, 0x5f, 0x61, 0x69, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x0f, 0x77, 0x72, 0x61, 0x74, 0x68,
	0x4f, 0x66, 0x41, 0x69, 0x72, 0x54, 0x6f, 0x74, 0x65, 0x6d, 0x22, 0xc1, 0x07, 0x0a, 0x08, 0x43,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x6c, 0x61, 0x73, 0x6b,
	0x5f, 0x6f, 0x66, 0x5f, 0x62, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x67,
	0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x66, 0x6c, 0x61, 0x73, 0x6b, 0x4f,
	0x66, 0x42, 0x6c, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x12, 0x3d,
	0x0a, 0x1b, 0x66, 0x6c, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x69, 0x67, 0x68, 0x74,
	0x79, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x18, 0x66, 0x6c, 0x61, 0x73, 0x6b, 0x4f, 0x66, 0x4d, 0x69, 0x67, 0x68,
	0x74, 0x79, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a,
	0x13, 0x66, 0x6c, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x66, 0x5f, 0x70, 0x75, 0x72, 0x65, 0x5f, 0x64,
	0x65, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x6c, 0x61, 0x73,
	0x6b, 0x4f, 0x66, 0x50, 0x75, 0x72, 0x65, 0x44, 0x65, 0x61, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16,
	0x66, 0x6c, 0x61, 0x73, 0x6b, 0x5f, 0x6f, 0x66, 0x5f, 0x73, 0x75, 0x70, 0x72, 0x65, 0x6d, 0x65,
	0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x6c,
	0x61, 0x73, 0x6b, 0x4f, 0x66, 0x53, 0x75, 0x70, 0x72, 0x65, 0x6d, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61, 0x64, 0x65, 0x70, 0x74, 0x73, 0x5f, 0x65, 0x6c, 0x69, 0x78,
	0x69, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x64, 0x65, 0x70, 0x74, 0x73,
	0x45, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x12, 0x3a, 0x0a, 0x1a, 0x65, 0x6c, 0x69, 0x78, 0x69, 0x72,
	0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x5f, 0x70,
	0x6f, 0x77, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6c, 0x69, 0x78,
	0x69, 0x72, 0x4f, 0x66, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x46, 0x69, 0x72, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x3c, 0x0a, 0x1b, 0x65, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x5f, 0x6f, 0x66, 0x5f,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x66, 0x72, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x6f, 0x77, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x65, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x4f,
	0x66, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x3e, 0x0a, 0x1c, 0x65, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61,
	0x6a, 0x6f, 0x72, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x5f, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x65, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x4f, 0x66,
	0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x12, 0x37, 0x0a, 0x18, 0x65, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x64, 0x72,
	0x61, 0x65, 0x6e, 0x69, 0x63, 0x5f, 0x77, 0x69, 0x73, 0x64, 0x6f, 0x6d, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x15, 0x65, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x4f, 0x66, 0x44, 0x72, 0x61, 0x65,
	0x6e, 0x69, 0x63, 0x57, 0x69, 0x73, 0x64, 0x6f, 0x6d, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x6c, 0x69,
	0x78, 0x69, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x5f, 0x6d, 0x61, 0x67,
	0x65, 0x62, 0x6c, 0x6f, 0x6f, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x65, 0x6c,
	0x69, 0x78, 0x69, 0x72, 0x4f, 0x66, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x4d, 0x61, 0x67, 0x65, 0x62,
	0x6c, 0x6f, 0x6f, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e,
	0x74, 0x5f, 0x77, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x69, 0x6c, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x62, 0x72, 0x69, 0x6c, 0x6c, 0x69, 0x61, 0x6e, 0x74, 0x57, 0x69, 0x7a,
	0x61, 0x72, 0x64, 0x4f, 0x69, 0x6c, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x72, 0x5f, 0x77, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x69, 0x6c, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x75, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x57, 0x69, 0x7a,
	0x61, 0x72, 0x64, 0x4f, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x12, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x65, 0x64, 0x5f, 0x62, 0x61, 0x73, 0x69, 0x6c, 0x69, 0x73, 0x6b, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x65, 0x64, 0x42, 0x61, 0x73,
	0x69, 0x6c, 0x69, 0x73, 0x6b, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x75, 0x6c, 0x6c, 0x66, 0x69,
	0x73, 0x68, 0x5f, 0x73, 0x6f, 0x75, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x73,
	0x6b, 0x75, 0x6c, 0x6c, 0x66, 0x69, 0x73, 0x68, 0x53, 0x6f, 0x75, 0x70, 0x12, 0x2d, 0x0a, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x64, 0x65, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x70, 0x6f, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x4d, 0x61, 0x6e,
	0x61, 0x50, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x72, 0x6b, 0x5f,
	0x72, 0x75, 0x6e, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x61, 0x72, 0x6b,
	0x52, 0x75, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x64, 0x72, 0x75, 0x6d, 0x73, 0x5f, 0x6f, 0x66,
	0x5f, 0x62, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64,
	0x72, 0x75, 0x6d, 0x73, 0x4f, 0x66, 0x42, 0x61, 0x74, 0x74, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x14,
	0x64, 0x72, 0x75, 0x6d, 0x73, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x64, 0x72, 0x75, 0x6d,
	0x73, 0x4f, 0x66, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b,
	0x0a, 0x09, 0x45, 0x6e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6e, 0x75,
	0x6d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x22, 0x48, 0x0a, 0x08, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x67, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x04, 0x67, 0x65, 0x6d, 0x73, 0x22, 0x34, 0x0a, 0x0d, 0x45, 0x71, 0x75, 0x69, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x70, 0x65, 0x63, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xa7, 0x03, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x0a, 0x61,
	0x72, 0x6d, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x61, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x77, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x09,
	0x68, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x68, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x43, 0x0a, 0x12, 0x72, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x10, 0x72, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x67, 0x65, 0x6d, 0x5f, 0x73, 0x6f, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47,
	0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x0a, 0x67, 0x65, 0x6d, 0x53, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x71, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x71, 0x75,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0xf8, 0x01, 0x0a, 0x07, 0x45, 0x6e, 0x63, 0x68, 0x61, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x77, 0x6f, 0x5f, 0x68, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x74, 0x77, 0x6f, 0x48, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x22, 0xa6, 0x01, 0x0a, 0x03, 0x47, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x23, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72,
	0x52, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x07, 0x71, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2a, 0xc8, 0x01, 0x0a, 0x04, 0x52, 0x61,
	0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x61, 0x63, 0x65, 0x42, 0x6c, 0x6f, 0x6f, 0x64,
	0x45, 0x6c, 0x66, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x61, 0x63, 0x65, 0x44, 0x72, 0x61,
	0x65, 0x6e, 0x65, 0x69, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x61, 0x63, 0x65, 0x44, 0x77,
	0x61, 0x72, 0x66, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x61, 0x63, 0x65, 0x47, 0x6e, 0x6f,
	0x6d, 0x65, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x61, 0x63, 0x65, 0x48, 0x75, 0x6d, 0x61,
	0x6e, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x61, 0x63, 0x65, 0x4e, 0x69, 0x67, 0x68, 0x74,
	0x45, 0x6c, 0x66, 0x10, 0x06, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x61, 0x63, 0x65, 0x4f, 0x72, 0x63,
	0x10, 0x07, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x65, 0x54, 0x61, 0x75, 0x72, 0x65, 0x6e,
	0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x61, 0x63, 0x65, 0x54, 0x72, 0x6f, 0x6c, 0x6c, 0x31,
	0x30, 0x10, 0x09, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x61, 0x63, 0x65, 0x54, 0x72, 0x6f, 0x6c, 0x6c,
	0x33, 0x30, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x65, 0x55, 0x6e, 0x64, 0x65,
	0x61, 0x64, 0x10, 0x0b, 0x2a, 0xb1, 0x01, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x10,
	0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x44, 0x72, 0x75, 0x69, 0x64, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x48, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4d, 0x61, 0x67, 0x65, 0x10, 0x03,
	0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x61, 0x6c, 0x61, 0x64, 0x69, 0x6e,
	0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x69, 0x65, 0x73,
	0x74, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x6f, 0x67, 0x75,
	0x65, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x53, 0x68, 0x61, 0x6d,
	0x61, 0x6e, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x57, 0x61, 0x72,
	0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x57,
	0x61, 0x72, 0x72, 0x69, 0x6f, 0x72, 0x10, 0x09, 0x2a, 0x35, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x70, 0x65, 0x63, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x44,
	0x72, 0x75, 0x69, 0x64, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x45, 0x6c,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x10, 0x01, 0x2a,
	0xb4, 0x04, 0x0a, 0x04, 0x53, 0x74, 0x61, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74,
	0x53, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x74, 0x41, 0x67, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x74, 0x61, 0x74, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x53, 0x70, 0x69, 0x72, 0x69, 0x74, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x74, 0x61, 0x74, 0x48, 0x65, 0x61, 0x6c, 0x69,
	0x6e, 0x67, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x06, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61,
	0x74, 0x41, 0x72, 0x63, 0x61, 0x6e, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x46, 0x69, 0x72, 0x65, 0x53,
	0x70, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x53,
	0x74, 0x61, 0x74, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x10, 0x09, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x48, 0x6f, 0x6c, 0x79,
	0x53, 0x70, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14,
	0x53, 0x74, 0x61, 0x74, 0x4e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x53, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x10, 0x0c,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x50, 0x35, 0x10, 0x0d, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x48, 0x69, 0x74, 0x10, 0x0e, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x43, 0x72, 0x69, 0x74,
	0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x53, 0x70, 0x65, 0x6c, 0x6c, 0x48,
	0x61, 0x73, 0x74, 0x65, 0x10, 0x10, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x53, 0x70,
	0x65, 0x6c, 0x6c, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x11,
	0x12, 0x13, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x74, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x50, 0x6f,
	0x77, 0x65, 0x72, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x4d, 0x65, 0x6c,
	0x65, 0x65, 0x48, 0x69, 0x74, 0x10, 0x13, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x4d,
	0x65, 0x6c, 0x65, 0x65, 0x43, 0x72, 0x69, 0x74, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74,
	0x61, 0x74, 0x4d, 0x65, 0x6c, 0x65, 0x65, 0x48, 0x61, 0x73, 0x74, 0x65, 0x10, 0x15, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x74, 0x61, 0x74, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x50, 0x65, 0x6e, 0x65, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x16, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x74,
	0x45, 0x78, 0x70, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x74, 0x61,
	0x74, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x10, 0x19, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x74, 0x52, 0x61, 0x67, 0x65, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x41,
	0x72, 0x6d, 0x6f, 0x72, 0x10, 0x1b, 0x2a, 0xac, 0x02, 0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x65, 0x61, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x65, 0x63, 0x6b, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x65, 0x72,
	0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x42, 0x61,
	0x63, 0x6b, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x73, 0x74, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x57, 0x72, 0x69, 0x73, 0x74, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x10, 0x07, 0x12, 0x11, 0x0a,
	0x0d, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x57, 0x61, 0x69, 0x73, 0x74, 0x10, 0x08,
	0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x67, 0x73,
	0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x46, 0x65,
	0x65, 0x74, 0x10, 0x0a, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x69, 0x6e, 0x6b, 0x65, 0x74, 0x10, 0x0c, 0x12, 0x12, 0x0a,
	0x0e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x10,
	0x0d, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x10, 0x0e, 0x2a, 0x72, 0x0a, 0x09, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x72, 0x6d, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6c, 0x6f, 0x74, 0x68, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10,
	0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72,
	0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4d,
	0x61, 0x69, 0x6c, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x72, 0x6d, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x10, 0x04, 0x2a, 0xe2, 0x01, 0x0a, 0x0a, 0x57, 0x65,
	0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x78, 0x65,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x44, 0x61, 0x67, 0x67, 0x65, 0x72, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x73, 0x74, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x63, 0x65, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66,
	0x66, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x50, 0x6f, 0x6c, 0x65, 0x61, 0x72, 0x6d, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x74, 0x61, 0x66, 0x66, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x53, 0x77, 0x6f, 0x72, 0x64, 0x10, 0x09, 0x2a, 0x74,
	0x0a, 0x08, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x69, 0x6e, 0x48,
	0x61, 0x6e, 0x64, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x4f, 0x6e, 0x65, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x66, 0x66, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x03, 0x12,
	0x13, 0x0a, 0x0f, 0x48, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x54, 0x77, 0x6f, 0x48, 0x61,
	0x6e, 0x64, 0x10, 0x04, 0x2a, 0x86, 0x02, 0x0a, 0x10, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x77, 0x10, 0x01, 0x12,
	0x1c, 0x0a, 0x18, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x62, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x47, 0x75, 0x6e, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x6f, 0x6c, 0x10, 0x04,
	0x12, 0x1a, 0x0a, 0x16, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4c, 0x69, 0x62, 0x72, 0x61, 0x6d, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x68, 0x72, 0x6f, 0x77, 0x6e, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x54, 0x6f, 0x74, 0x65,
	0x6d, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x57, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x57, 0x61, 0x6e, 0x64, 0x10, 0x08, 0x2a, 0xdb, 0x02,
	0x0a, 0x08, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74,
	0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x65, 0x61, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x4e, 0x65, 0x63, 0x6b, 0x10, 0x01, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x65, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74,
	0x42, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c,
	0x6f, 0x74, 0x43, 0x68, 0x65, 0x73, 0x74, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x74, 0x65,
	0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x57, 0x72, 0x69, 0x73, 0x74, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x48, 0x61, 0x6e, 0x64, 0x73, 0x10, 0x06, 0x12,
	0x11, 0x0a, 0x0d, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x57, 0x61, 0x69, 0x73, 0x74,
	0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x4c, 0x65,
	0x67, 0x73, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74,
	0x46, 0x65, 0x65, 0x74, 0x10, 0x09, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c,
	0x6f, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x31, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x32, 0x10, 0x0b,
	0x12, 0x14, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x54, 0x72, 0x69, 0x6e,
	0x6b, 0x65, 0x74, 0x31, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c,
	0x6f, 0x74, 0x54, 0x72, 0x69, 0x6e, 0x6b, 0x65, 0x74, 0x32, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x4d, 0x61, 0x69, 0x6e, 0x48, 0x61, 0x6e, 0x64,
	0x10, 0x0e, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x53, 0x6c, 0x6f, 0x74, 0x4f, 0x66,
	0x66, 0x48, 0x61, 0x6e, 0x64, 0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x74, 0x65, 0x6d, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x10, 0x2a, 0x96, 0x01, 0x0a, 0x0b,
	0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x13, 0x0a, 0x0f, 0x49,
	0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4a, 0x75, 0x6e, 0x6b, 0x10, 0x00,
	0x12, 0x15, 0x0a, 0x11, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x74, 0x65, 0x6d, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x55, 0x6e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x72, 0x65, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x45, 0x70, 0x69, 0x63, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x74,
	0x65, 0x6d, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x4c, 0x65, 0x67, 0x65, 0x6e, 0x64, 0x61,
	0x72, 0x79, 0x10, 0x05, 0x2a, 0xba, 0x01, 0x0a, 0x08, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x65, 0x6d, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x65, 0x64, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x65, 0x6d,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x42, 0x6c, 0x75, 0x65, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x47,
	0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x59, 0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x04, 0x12,
	0x11, 0x0a, 0x0d, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x47, 0x72, 0x65, 0x65, 0x6e,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x4f, 0x72,
	0x61, 0x6e, 0x67, 0x65, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x65, 0x6d, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x50, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x65,
	0x6d, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x10,
	0x08, 0x2a, 0x62, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x72, 0x69, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x19,
	0x0a, 0x15, 0x54, 0x72, 0x69, 0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74,
	0x52, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x49, 0x6d, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x64, 0x10, 0x02, 0x42, 0x06, 0x5a, 0x04, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_enumTypes = make([]protoimpl.EnumInfo, 13)
var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_common_proto_goTypes = []interface{}{
	(Race)(0),             // 0: api.Race
	(Class)(0),            // 1: api.Class
	(Spec)(0),             // 2: api.Spec
	(Stat)(0),             // 3: api.Stat
	(ItemType)(0),         // 4: api.ItemType
	(ArmorType)(0),        // 5: api.ArmorType
	(WeaponType)(0),       // 6: api.WeaponType
	(HandType)(0),         // 7: api.HandType
	(RangedWeaponType)(0), // 8: api.RangedWeaponType
	(ItemSlot)(0),         // 9: api.ItemSlot
	(ItemQuality)(0),      // 10: api.ItemQuality
	(GemColor)(0),         // 11: api.GemColor
	(TristateEffect)(0),   // 12: api.TristateEffect
	(*Buffs)(nil),         // 13: api.Buffs
	(*Consumes)(nil),      // 14: api.Consumes
	(*Encounter)(nil),     // 15: api.Encounter
	(*ItemSpec)(nil),      // 16: api.ItemSpec
	(*EquipmentSpec)(nil), // 17: api.EquipmentSpec
	(*Item)(nil),          // 18: api.Item
	(*Enchant)(nil),       // 19: api.Enchant
	(*Gem)(nil),           // 20: api.Gem
}
var file_common_proto_depIdxs = []int32{
	12, // 0: api.Buffs.blessing_of_wisdom:type_name -> api.TristateEffect
	12, // 1: api.Buffs.divine_spirit:type_name -> api.TristateEffect
	12, // 2: api.Buffs.gift_of_the_wild:type_name -> api.TristateEffect
	12, // 3: api.Buffs.moonkin_aura:type_name -> api.TristateEffect
	12, // 4: api.Buffs.mana_spring_totem:type_name -> api.TristateEffect
	12, // 5: api.Buffs.wrath_of_air_totem:type_name -> api.TristateEffect
	16, // 6: api.EquipmentSpec.items:type_name -> api.ItemSpec
	4,  // 7: api.Item.type:type_name -> api.ItemType
	5,  // 8: api.Item.armor_type:type_name -> api.ArmorType
	6,  // 9: api.Item.weapon_type:type_name -> api.WeaponType
	7,  // 10: api.Item.hand_type:type_name -> api.HandType
	8,  // 11: api.Item.ranged_weapon_type:type_name -> api.RangedWeaponType
	11, // 12: api.Item.gem_sockets:type_name -> api.GemColor
	10, // 13: api.Item.quality:type_name -> api.ItemQuality
	4,  // 14: api.Enchant.type:type_name -> api.ItemType
	10, // 15: api.Enchant.quality:type_name -> api.ItemQuality
	11, // 16: api.Gem.color:type_name -> api.GemColor
	10, // 17: api.Gem.quality:type_name -> api.ItemQuality
	18, // [18:18] is the sub-list for method output_type
	18, // [18:18] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Buffs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Consumes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Encounter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ItemSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EquipmentSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enchant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_common_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Gem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      13,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		EnumInfos:         file_common_proto_enumTypes,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
