syntax = "proto3";
package newapi;

option go_package = "api/";

enum Race {
    RaceUnknown = 0;
    RaceBloodElf = 1;
    RaceDraenei = 2;
    RaceDwarf = 3;
    RaceGnome = 4;
    RaceHuman = 5;
    RaceNightElf = 6;
    RaceOrc = 7;
    RaceTauren = 8;
    RaceTroll10 = 9;
    RaceTroll30 = 10;
    RaceUndead = 11;
}

enum Class {
  ClassUnknown = 0;
  ClassDruid = 1;
  ClassHunter = 2;
  ClassMage = 3;
  ClassPaladin = 4;
  ClassPriest = 5;
  ClassRogue = 6;
  ClassShaman = 7;
  ClassWarlock = 8;
  ClassWarrior = 9;
}

enum Stat {
    StatStrength = 0;
    StatAgility = 1;
    StatStamina = 2;
    StatIntellect = 3;
    StatSpirit = 4;
    StatSpellPower = 5;
    StatHealingPower = 6;
    StatArcaneSpellPower = 7;
    StatFireSpellPower = 8;
    StatFrostSpellPower = 9;
    StatHolySpellPower = 10;
    StatNatureSpellPower = 11;
    StatShadowSpellPower = 12;
    StatMP5 = 13;
    StatSpellHit = 14;
    StatSpellCrit = 15;
    StatSpellHaste = 16;
    StatSpellPenetration = 17;
    StatAttackPower = 18;
    StatMeleeHit = 19;
    StatMeleeCrit = 20;
    StatMeleeHaste = 21;
    StatArmorPenetration = 22;
    StatExpertise = 23;
    StatMana = 24;
    StatEnergy = 25;
    StatRage = 26;
    StatArmor = 27;
}

enum ItemType {
    ItemTypeUnknown = 0;
    ItemTypeHead = 1;
    ItemTypeNeck = 2;
    ItemTypeShoulder = 3;
    ItemTypeBack = 4;
    ItemTypeChest = 5;
    ItemTypeWrist = 6;
    ItemTypeHands = 7;
    ItemTypeWaist = 8;
    ItemTypeLegs = 9;
    ItemTypeFeet = 10;
    ItemTypeFinger = 11;
    ItemTypeTrinket = 12;
    ItemTypeWeapon = 13;
    ItemTypeRanged = 14;
}

enum ArmorType {
    ArmorTypeUnknown = 0;
    ArmorTypeCloth = 1;
    ArmorTypeLeather = 2;
    ArmorTypeMail = 3;
    ArmorTypePlate = 4;
}

enum WeaponType {
    WeaponTypeUnknown = 0;
    WeaponTypeAxe = 1;
    WeaponTypeDagger = 2;
    WeaponTypeFist = 3;
    WeaponTypeMace = 4;
    WeaponTypePolearm = 5;
    WeaponTypeOffHand = 6;
    WeaponTypeStaff = 7;
    WeaponTypeSword = 8;
    WeaponTypeShield = 9;
}

enum HandType {
    HandTypeUnknown = 0;
    HandTypeMainHand = 1;
    HandTypeOneHand = 2;
    HandTypeOffHand = 3;
    HandTypeTwoHand = 4;
}

enum RangedWeaponType {
    RangedWeaponTypeUnknown = 0;
    RangedWeaponTypeBow = 1;
    RangedWeaponTypeCrossbow = 2;
    RangedWeaponTypeGun = 3;
    RangedWeaponTypeLibram = 5;
    RangedWeaponTypeRelic = 6;
    RangedWeaponTypeThrown = 7;
    RangedWeaponTypeTotem = 8;
    RangedWeaponTypeWand = 9;
}

// All slots on the gear menu where a single item can be worn.
enum ItemSlot {
    ItemSlotHead = 0;
    ItemSlotNeck = 1;
    ItemSlotShoulder = 2;
    ItemSlotBack = 3;
    ItemSlotChest = 4;
    ItemSlotWrist = 5;
    ItemSlotHands = 6;
    ItemSlotWaist = 7;
    ItemSlotLegs = 8;
    ItemSlotFeet = 9;
    ItemSlotFinger1 = 10;
    ItemSlotFinger2 = 11;
    ItemSlotTrinket1 = 12;
    ItemSlotTrinket2 = 13;
    ItemSlotMainHand = 14; // can be 1h or 2h
    ItemSlotOffHand = 15;
    ItemSlotRanged = 16;
}

enum ItemQuality {
    ItemQualityJunk = 0;
    ItemQualityUncommon = 1;
    ItemQualityRare = 2;
    ItemQualityEpic = 3;
    ItemQualityLegendary = 4;
}

enum GemColor {
    GemColorUnknown = 0;
    GemColorMeta = 1;
    GemColorRed = 2;
    GemColorBlue = 3;
    GemColorYellow = 4;
    GemColorGreen = 5;
    GemColorOrange = 6;
    GemColorPurple = 7;
    GemColorPrismatic = 8;
}

enum TristateEffect {
    TristateEffectMissing = 0;
    TristateEffectRegular = 1;
    TristateEffectImproved = 2;
}

message Buffs {
    // Raid buffs
    bool arcane_brilliance = 1;
    bool blessing_of_kings = 2;
    TristateEffect blessing_of_wisdom = 3;
    TristateEffect divine_spirit = 4;
    TristateEffect gift_of_the_wild = 5;

    // Party Buffs
    int32 bloodlust = 6;
    TristateEffect moonkin_aura = 7;
    int32 shadow_priest_dps = 8;

    // Target Debuff
    bool judgement_of_wisdom = 9;
    bool improved_seal_of_the_crusader = 10;
    bool misery = 11;

    // Item Buffs
    bool eye_of_the_night = 12;
    bool chain_of_the_twilight_owl = 13;
    bool jade_pendant_of_blasting = 14;

    // Totems
    TristateEffect mana_spring_totem = 15;
    bool mana_tide_totem = 16;
    int32 totem_of_wrath = 17;
    TristateEffect wrath_of_air_totem = 18;
}

message Consumes {
    bool flask_of_blinding_light = 1;
    bool flask_of_mighty_restoration = 2;
    bool flask_of_pure_death = 3;
    bool flask_of_supreme_power = 4;

    bool adepts_elixir = 5;
    bool elixir_of_major_fire_power = 6;
    bool elixir_of_major_frost_power = 7;
    bool elixir_of_major_shadow_power = 8;

    bool elixir_of_draenic_wisdom = 9;
    bool elixir_of_major_mageblood = 10;

    bool brilliant_wizard_oil = 11; 
    bool superior_wizard_oil = 12; 

    bool blackened_basilisk = 13;
    bool skullfish_soup = 14;

    bool destruction_potion = 15;
    bool super_mana_potion = 16;

    bool dark_rune = 17;

    bool drums_of_battle = 18;
    bool drums_of_restoration = 19;
}

message Encounter {
    double duration = 1;
    int32 num_targets = 2;
    int32 target_armor = 3;
}

message PlayerOptions {
    Race race = 1;
    oneof spec {
        BalanceDruid balance_druid = 2;
        Hunter hunter = 3;
        Mage mage = 4;
        Paladin paladin = 5;
        Priest priest = 6;
        Rogue rogue = 7;
        ElementalShaman elemental_shaman = 8;
        Warlock warlock = 9;
        Warrior warrior = 10;
    }
    Consumes consumes = 11; // What consumes this player is going to be using.
}

message DruidTalents {
    int32 starlight_wrath = 1;
}
message BalanceDruid {
    message BalanceDruidAgent {
    }
    BalanceDruidAgent agent = 1;

    DruidTalents talents = 2;
    
    message BalanceDruidOptions {
    }
    BalanceDruidOptions options = 3;
}
message Hunter {
}
message Mage {
}
message Paladin {
}
message Priest {
}
message Rogue {
}
message ShamanTalents {
    // Elemental
    int32 convection = 1;
    int32 concussion = 2;
    int32 call_of_flame = 3;
    bool elemental_focus = 4;
    int32 reverberation = 5;
    int32 call_of_thunder = 6;
    int32 improved_fire_totems = 7;
    int32 elemental_devastation = 8;
    bool elemental_fury = 9;
    int32 unrelenting_storm = 10;
    int32 elemental_precision = 11;
    int32 lightning_mastery = 12;
    bool elemental_mastery = 13;
    int32 lightning_overload = 14;

    // Enhancement
    int32 ancestral_knowledge = 15;
    int32 thundering_strikes = 16;
    int32 enhancing_totems = 17;
    bool shamanistic_focus = 18;
    int32 flurry = 19;
    int32 improved_weapon_totems = 20;
    int32 elemental_weapons = 21;
    int32 mental_quickness = 22;
    int32 weapon_mastery = 23;
    int32 dual_wield_specialization = 24;
    int32 unleashed_rage = 25;

    // Restoration
    int32 totemic_focus = 26;
    int32 natures_guidance = 27;
    int32 restorative_totems = 28;
    int32 tidal_mastery = 29;
    bool natures_swiftness = 30;
    bool mana_tide_totem = 31;
    int32 natures_blessing = 32;
}
message ElementalShaman {
    message ElementalShamanAgent {
      enum AgentType {
          Unknown = 0;
          FixedLBCL = 1;
          CLOnClearcast = 2;
          Adaptive = 3;
      }
      AgentType type = 1;
    }
    ElementalShamanAgent agent = 1;

    ShamanTalents talents = 2;
    
    message ElementalShamanOptions {
        bool water_shield = 1;
        // int32 WaterShieldPPM
    }
    ElementalShamanOptions options = 3;
}
message Warlock {
}
message Warrior {
}

message ItemSpec {
    int32 id = 2;
    int32 enchant = 3;
    repeated int32 gems = 4;
}

message EquipmentSpec {
    repeated ItemSpec items = 1;
}

message Player {
    PlayerOptions options = 1;
    EquipmentSpec equipment = 2;
    repeated double custom_stats = 3;
}

message Party {
    repeated Player players = 1;
}

message Raid {
    repeated Party parties = 1; 
}

// RPC IndividualSim
message IndividualSimRequest {
    Player player = 1;
    Buffs buffs = 2;
    Encounter encounter = 3;
    int32 iterations = 4;
    int64 random_seed = 5;
    double gcd_min = 6; // sets the minimum GCD
    bool debug = 7; // enables debug logging.
    bool exit_on_oom = 8;
}

message IndividualSimResult {
    int64 execution_duration_ms = 1;
    string logs = 2;

    double dps_avg   = 3;
    double dps_stdev = 4;
    double dps_max   = 5;
    map<int32, int32> dps_hist = 6;

    int32 num_oom = 7;
    double oom_at_avg = 8;
    double dps_at_oom_avg = 9;

    map<int32, CastMetric> casts = 10;
    // FUTURE: melee
    // map<int32, AttackMetric> attacks = 11; 

    string error = 11; 
}

// CastMetric holds a collection of counts of casts and 
// 
message CastMetric {
    repeated int32 counts = 1;
    repeated double dmgs = 2;
    repeated int32 tags = 3;
}

// RPC RaidSim
message RaidSimRequest {
    Raid raid = 1;
    Encounter encounter = 2;
    int64 random_seed = 3;
    double gcd_min = 4; // sets the minimum GCD
    bool debug = 5; // enables debug printing.
}

message Item {
    int32 id = 1;
    string name = 2;

    ItemType type = 3;
    ArmorType armor_type = 4;
    WeaponType weapon_type = 5;
    HandType hand_type = 6;
    RangedWeaponType ranged_weapon_type = 7;

    repeated double stats = 8;
    repeated GemColor gem_sockets = 11;

    int32 phase = 9;
    ItemQuality quality = 10;
}
message Enchant {
    int32 id = 1;        // ID of the enchant "item".
    int32 effect_id = 2; // ID of the effect (for the item tooltip UI)
    string name = 3;     

    ItemType type = 4;   // Which type of item this enchant can be applied to.
    bool two_handed_only = 5;
    bool shield_only = 6;

    repeated double stats = 7;

    ItemQuality quality = 8;
}
message Gem {
    int32 id = 1;
    string name = 2;

    repeated double stats = 3;
    GemColor color = 4;

    int32 phase = 5;
    ItemQuality quality = 6;
}

// RPC GearList
enum Spec {
    SpecBalanceDruid = 0;
    SpecElementalShaman = 1;
}
message GearListRequest {
    Spec spec = 1; // Each spec has a custom gear list
}
message GearListResult {
    repeated Item items = 1;
    repeated Enchant enchants = 2;
    repeated Gem gems = 3;
}

// RPC ComputeStats
message ComputeStatsRequest {
    Player player = 1;
    Buffs buffs = 2;
    EquipmentSpec gear = 3;
}
message ComputeStatsResult {
    repeated double gear_only = 1;
    repeated double finalStats = 2;
    repeated string sets = 3;
}

// RPC StatWeights
message StatWeightsRequest {
    IndividualSimRequest options = 1;
    repeated Stat stats_to_weigh = 2;
    Stat ep_reference_stat = 3;
}
message StatWeightsResult {
    repeated double weights = 1;
    repeated double weights_stdev = 2;
    repeated double ep_values = 3;
    repeated double ep_values_stdev = 4;
}
