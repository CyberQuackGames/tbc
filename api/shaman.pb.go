// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: shaman.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ElementalShaman_ElementalShamanAgent_AgentType int32

const (
	ElementalShaman_ElementalShamanAgent_Unknown       ElementalShaman_ElementalShamanAgent_AgentType = 0
	ElementalShaman_ElementalShamanAgent_FixedLBCL     ElementalShaman_ElementalShamanAgent_AgentType = 1
	ElementalShaman_ElementalShamanAgent_CLOnClearcast ElementalShaman_ElementalShamanAgent_AgentType = 2
	ElementalShaman_ElementalShamanAgent_Adaptive      ElementalShaman_ElementalShamanAgent_AgentType = 3
)

// Enum value maps for ElementalShaman_ElementalShamanAgent_AgentType.
var (
	ElementalShaman_ElementalShamanAgent_AgentType_name = map[int32]string{
		0: "Unknown",
		1: "FixedLBCL",
		2: "CLOnClearcast",
		3: "Adaptive",
	}
	ElementalShaman_ElementalShamanAgent_AgentType_value = map[string]int32{
		"Unknown":       0,
		"FixedLBCL":     1,
		"CLOnClearcast": 2,
		"Adaptive":      3,
	}
)

func (x ElementalShaman_ElementalShamanAgent_AgentType) Enum() *ElementalShaman_ElementalShamanAgent_AgentType {
	p := new(ElementalShaman_ElementalShamanAgent_AgentType)
	*p = x
	return p
}

func (x ElementalShaman_ElementalShamanAgent_AgentType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ElementalShaman_ElementalShamanAgent_AgentType) Descriptor() protoreflect.EnumDescriptor {
	return file_shaman_proto_enumTypes[0].Descriptor()
}

func (ElementalShaman_ElementalShamanAgent_AgentType) Type() protoreflect.EnumType {
	return &file_shaman_proto_enumTypes[0]
}

func (x ElementalShaman_ElementalShamanAgent_AgentType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ElementalShaman_ElementalShamanAgent_AgentType.Descriptor instead.
func (ElementalShaman_ElementalShamanAgent_AgentType) EnumDescriptor() ([]byte, []int) {
	return file_shaman_proto_rawDescGZIP(), []int{1, 0, 0}
}

type ShamanTalents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Elemental
	Convection           int32 `protobuf:"varint,1,opt,name=convection,proto3" json:"convection,omitempty"`
	Concussion           int32 `protobuf:"varint,2,opt,name=concussion,proto3" json:"concussion,omitempty"`
	CallOfFlame          int32 `protobuf:"varint,3,opt,name=call_of_flame,json=callOfFlame,proto3" json:"call_of_flame,omitempty"`
	ElementalFocus       bool  `protobuf:"varint,4,opt,name=elemental_focus,json=elementalFocus,proto3" json:"elemental_focus,omitempty"`
	Reverberation        int32 `protobuf:"varint,5,opt,name=reverberation,proto3" json:"reverberation,omitempty"`
	CallOfThunder        int32 `protobuf:"varint,6,opt,name=call_of_thunder,json=callOfThunder,proto3" json:"call_of_thunder,omitempty"`
	ImprovedFireTotems   int32 `protobuf:"varint,7,opt,name=improved_fire_totems,json=improvedFireTotems,proto3" json:"improved_fire_totems,omitempty"`
	ElementalDevastation int32 `protobuf:"varint,8,opt,name=elemental_devastation,json=elementalDevastation,proto3" json:"elemental_devastation,omitempty"`
	ElementalFury        bool  `protobuf:"varint,9,opt,name=elemental_fury,json=elementalFury,proto3" json:"elemental_fury,omitempty"`
	UnrelentingStorm     int32 `protobuf:"varint,10,opt,name=unrelenting_storm,json=unrelentingStorm,proto3" json:"unrelenting_storm,omitempty"`
	ElementalPrecision   int32 `protobuf:"varint,11,opt,name=elemental_precision,json=elementalPrecision,proto3" json:"elemental_precision,omitempty"`
	LightningMastery     int32 `protobuf:"varint,12,opt,name=lightning_mastery,json=lightningMastery,proto3" json:"lightning_mastery,omitempty"`
	ElementalMastery     bool  `protobuf:"varint,13,opt,name=elemental_mastery,json=elementalMastery,proto3" json:"elemental_mastery,omitempty"`
	LightningOverload    int32 `protobuf:"varint,14,opt,name=lightning_overload,json=lightningOverload,proto3" json:"lightning_overload,omitempty"`
	// Enhancement
	AncestralKnowledge      int32 `protobuf:"varint,15,opt,name=ancestral_knowledge,json=ancestralKnowledge,proto3" json:"ancestral_knowledge,omitempty"`
	ThunderingStrikes       int32 `protobuf:"varint,16,opt,name=thundering_strikes,json=thunderingStrikes,proto3" json:"thundering_strikes,omitempty"`
	EnhancingTotems         int32 `protobuf:"varint,17,opt,name=enhancing_totems,json=enhancingTotems,proto3" json:"enhancing_totems,omitempty"`
	ShamanisticFocus        bool  `protobuf:"varint,18,opt,name=shamanistic_focus,json=shamanisticFocus,proto3" json:"shamanistic_focus,omitempty"`
	Flurry                  int32 `protobuf:"varint,19,opt,name=flurry,proto3" json:"flurry,omitempty"`
	ImprovedWeaponTotems    int32 `protobuf:"varint,20,opt,name=improved_weapon_totems,json=improvedWeaponTotems,proto3" json:"improved_weapon_totems,omitempty"`
	ElementalWeapons        int32 `protobuf:"varint,21,opt,name=elemental_weapons,json=elementalWeapons,proto3" json:"elemental_weapons,omitempty"`
	MentalQuickness         int32 `protobuf:"varint,22,opt,name=mental_quickness,json=mentalQuickness,proto3" json:"mental_quickness,omitempty"`
	WeaponMastery           int32 `protobuf:"varint,23,opt,name=weapon_mastery,json=weaponMastery,proto3" json:"weapon_mastery,omitempty"`
	DualWieldSpecialization int32 `protobuf:"varint,24,opt,name=dual_wield_specialization,json=dualWieldSpecialization,proto3" json:"dual_wield_specialization,omitempty"`
	UnleashedRage           int32 `protobuf:"varint,25,opt,name=unleashed_rage,json=unleashedRage,proto3" json:"unleashed_rage,omitempty"`
	// Restoration
	TotemicFocus      int32 `protobuf:"varint,26,opt,name=totemic_focus,json=totemicFocus,proto3" json:"totemic_focus,omitempty"`
	NaturesGuidance   int32 `protobuf:"varint,27,opt,name=natures_guidance,json=naturesGuidance,proto3" json:"natures_guidance,omitempty"`
	RestorativeTotems int32 `protobuf:"varint,28,opt,name=restorative_totems,json=restorativeTotems,proto3" json:"restorative_totems,omitempty"`
	TidalMastery      int32 `protobuf:"varint,29,opt,name=tidal_mastery,json=tidalMastery,proto3" json:"tidal_mastery,omitempty"`
	NaturesSwiftness  bool  `protobuf:"varint,30,opt,name=natures_swiftness,json=naturesSwiftness,proto3" json:"natures_swiftness,omitempty"`
	ManaTideTotem     bool  `protobuf:"varint,31,opt,name=mana_tide_totem,json=manaTideTotem,proto3" json:"mana_tide_totem,omitempty"`
	NaturesBlessing   int32 `protobuf:"varint,32,opt,name=natures_blessing,json=naturesBlessing,proto3" json:"natures_blessing,omitempty"`
}

func (x *ShamanTalents) Reset() {
	*x = ShamanTalents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shaman_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShamanTalents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShamanTalents) ProtoMessage() {}

func (x *ShamanTalents) ProtoReflect() protoreflect.Message {
	mi := &file_shaman_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShamanTalents.ProtoReflect.Descriptor instead.
func (*ShamanTalents) Descriptor() ([]byte, []int) {
	return file_shaman_proto_rawDescGZIP(), []int{0}
}

func (x *ShamanTalents) GetConvection() int32 {
	if x != nil {
		return x.Convection
	}
	return 0
}

func (x *ShamanTalents) GetConcussion() int32 {
	if x != nil {
		return x.Concussion
	}
	return 0
}

func (x *ShamanTalents) GetCallOfFlame() int32 {
	if x != nil {
		return x.CallOfFlame
	}
	return 0
}

func (x *ShamanTalents) GetElementalFocus() bool {
	if x != nil {
		return x.ElementalFocus
	}
	return false
}

func (x *ShamanTalents) GetReverberation() int32 {
	if x != nil {
		return x.Reverberation
	}
	return 0
}

func (x *ShamanTalents) GetCallOfThunder() int32 {
	if x != nil {
		return x.CallOfThunder
	}
	return 0
}

func (x *ShamanTalents) GetImprovedFireTotems() int32 {
	if x != nil {
		return x.ImprovedFireTotems
	}
	return 0
}

func (x *ShamanTalents) GetElementalDevastation() int32 {
	if x != nil {
		return x.ElementalDevastation
	}
	return 0
}

func (x *ShamanTalents) GetElementalFury() bool {
	if x != nil {
		return x.ElementalFury
	}
	return false
}

func (x *ShamanTalents) GetUnrelentingStorm() int32 {
	if x != nil {
		return x.UnrelentingStorm
	}
	return 0
}

func (x *ShamanTalents) GetElementalPrecision() int32 {
	if x != nil {
		return x.ElementalPrecision
	}
	return 0
}

func (x *ShamanTalents) GetLightningMastery() int32 {
	if x != nil {
		return x.LightningMastery
	}
	return 0
}

func (x *ShamanTalents) GetElementalMastery() bool {
	if x != nil {
		return x.ElementalMastery
	}
	return false
}

func (x *ShamanTalents) GetLightningOverload() int32 {
	if x != nil {
		return x.LightningOverload
	}
	return 0
}

func (x *ShamanTalents) GetAncestralKnowledge() int32 {
	if x != nil {
		return x.AncestralKnowledge
	}
	return 0
}

func (x *ShamanTalents) GetThunderingStrikes() int32 {
	if x != nil {
		return x.ThunderingStrikes
	}
	return 0
}

func (x *ShamanTalents) GetEnhancingTotems() int32 {
	if x != nil {
		return x.EnhancingTotems
	}
	return 0
}

func (x *ShamanTalents) GetShamanisticFocus() bool {
	if x != nil {
		return x.ShamanisticFocus
	}
	return false
}

func (x *ShamanTalents) GetFlurry() int32 {
	if x != nil {
		return x.Flurry
	}
	return 0
}

func (x *ShamanTalents) GetImprovedWeaponTotems() int32 {
	if x != nil {
		return x.ImprovedWeaponTotems
	}
	return 0
}

func (x *ShamanTalents) GetElementalWeapons() int32 {
	if x != nil {
		return x.ElementalWeapons
	}
	return 0
}

func (x *ShamanTalents) GetMentalQuickness() int32 {
	if x != nil {
		return x.MentalQuickness
	}
	return 0
}

func (x *ShamanTalents) GetWeaponMastery() int32 {
	if x != nil {
		return x.WeaponMastery
	}
	return 0
}

func (x *ShamanTalents) GetDualWieldSpecialization() int32 {
	if x != nil {
		return x.DualWieldSpecialization
	}
	return 0
}

func (x *ShamanTalents) GetUnleashedRage() int32 {
	if x != nil {
		return x.UnleashedRage
	}
	return 0
}

func (x *ShamanTalents) GetTotemicFocus() int32 {
	if x != nil {
		return x.TotemicFocus
	}
	return 0
}

func (x *ShamanTalents) GetNaturesGuidance() int32 {
	if x != nil {
		return x.NaturesGuidance
	}
	return 0
}

func (x *ShamanTalents) GetRestorativeTotems() int32 {
	if x != nil {
		return x.RestorativeTotems
	}
	return 0
}

func (x *ShamanTalents) GetTidalMastery() int32 {
	if x != nil {
		return x.TidalMastery
	}
	return 0
}

func (x *ShamanTalents) GetNaturesSwiftness() bool {
	if x != nil {
		return x.NaturesSwiftness
	}
	return false
}

func (x *ShamanTalents) GetManaTideTotem() bool {
	if x != nil {
		return x.ManaTideTotem
	}
	return false
}

func (x *ShamanTalents) GetNaturesBlessing() int32 {
	if x != nil {
		return x.NaturesBlessing
	}
	return 0
}

type ElementalShaman struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Agent   *ElementalShaman_ElementalShamanAgent   `protobuf:"bytes,1,opt,name=agent,proto3" json:"agent,omitempty"`
	Talents *ShamanTalents                          `protobuf:"bytes,2,opt,name=talents,proto3" json:"talents,omitempty"`
	Options *ElementalShaman_ElementalShamanOptions `protobuf:"bytes,3,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ElementalShaman) Reset() {
	*x = ElementalShaman{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shaman_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementalShaman) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementalShaman) ProtoMessage() {}

func (x *ElementalShaman) ProtoReflect() protoreflect.Message {
	mi := &file_shaman_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementalShaman.ProtoReflect.Descriptor instead.
func (*ElementalShaman) Descriptor() ([]byte, []int) {
	return file_shaman_proto_rawDescGZIP(), []int{1}
}

func (x *ElementalShaman) GetAgent() *ElementalShaman_ElementalShamanAgent {
	if x != nil {
		return x.Agent
	}
	return nil
}

func (x *ElementalShaman) GetTalents() *ShamanTalents {
	if x != nil {
		return x.Talents
	}
	return nil
}

func (x *ElementalShaman) GetOptions() *ElementalShaman_ElementalShamanOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

type ElementalShaman_ElementalShamanAgent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ElementalShaman_ElementalShamanAgent_AgentType `protobuf:"varint,1,opt,name=type,proto3,enum=api.ElementalShaman_ElementalShamanAgent_AgentType" json:"type,omitempty"`
}

func (x *ElementalShaman_ElementalShamanAgent) Reset() {
	*x = ElementalShaman_ElementalShamanAgent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shaman_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementalShaman_ElementalShamanAgent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementalShaman_ElementalShamanAgent) ProtoMessage() {}

func (x *ElementalShaman_ElementalShamanAgent) ProtoReflect() protoreflect.Message {
	mi := &file_shaman_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementalShaman_ElementalShamanAgent.ProtoReflect.Descriptor instead.
func (*ElementalShaman_ElementalShamanAgent) Descriptor() ([]byte, []int) {
	return file_shaman_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ElementalShaman_ElementalShamanAgent) GetType() ElementalShaman_ElementalShamanAgent_AgentType {
	if x != nil {
		return x.Type
	}
	return ElementalShaman_ElementalShamanAgent_Unknown
}

type ElementalShaman_ElementalShamanOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WaterShield bool `protobuf:"varint,1,opt,name=water_shield,json=waterShield,proto3" json:"water_shield,omitempty"` // int32 WaterShieldPPM
}

func (x *ElementalShaman_ElementalShamanOptions) Reset() {
	*x = ElementalShaman_ElementalShamanOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_shaman_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementalShaman_ElementalShamanOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementalShaman_ElementalShamanOptions) ProtoMessage() {}

func (x *ElementalShaman_ElementalShamanOptions) ProtoReflect() protoreflect.Message {
	mi := &file_shaman_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementalShaman_ElementalShamanOptions.ProtoReflect.Descriptor instead.
func (*ElementalShaman_ElementalShamanOptions) Descriptor() ([]byte, []int) {
	return file_shaman_proto_rawDescGZIP(), []int{1, 1}
}

func (x *ElementalShaman_ElementalShamanOptions) GetWaterShield() bool {
	if x != nil {
		return x.WaterShield
	}
	return false
}

var File_shaman_proto protoreflect.FileDescriptor

var file_shaman_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03,
	0x61, 0x70, 0x69, 0x22, 0xeb, 0x0a, 0x0a, 0x0d, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x54, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x63, 0x75,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x5f, 0x6f, 0x66,
	0x5f, 0x66, 0x6c, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x61,
	0x6c, 0x6c, 0x4f, 0x66, 0x46, 0x6c, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72, 0x62, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x62, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c,
	0x5f, 0x6f, 0x66, 0x5f, 0x74, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c, 0x4f, 0x66, 0x54, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x69, 0x72, 0x65, 0x54, 0x6f, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x65, 0x76, 0x61, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x14, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x44, 0x65, 0x76, 0x61,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x66, 0x75, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x46, 0x75, 0x72, 0x79, 0x12, 0x2b,
	0x0a, 0x11, 0x75, 0x6e, 0x72, 0x65, 0x6c, 0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74,
	0x6f, 0x72, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x75, 0x6e, 0x72, 0x65, 0x6c,
	0x65, 0x6e, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x72, 0x6d, 0x12, 0x2f, 0x0a, 0x13, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x6c, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69,
	0x6e, 0x67, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x12, 0x2d, 0x0a, 0x12, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e,
	0x69, 0x6e, 0x67, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x76, 0x65,
	0x72, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72,
	0x61, 0x6c, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x72, 0x61, 0x6c, 0x4b, 0x6e, 0x6f,
	0x77, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x68, 0x75, 0x6e, 0x64, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x74, 0x68, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0f, 0x65, 0x6e, 0x68, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x54, 0x6f, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x2b, 0x0a, 0x11, 0x73, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x5f,
	0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x73, 0x68, 0x61,
	0x6d, 0x61, 0x6e, 0x69, 0x73, 0x74, 0x69, 0x63, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x6c, 0x75, 0x72, 0x72, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x66,
	0x6c, 0x75, 0x72, 0x72, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65,
	0x64, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x69, 0x6d, 0x70, 0x72, 0x6f, 0x76, 0x65, 0x64, 0x57,
	0x65, 0x61, 0x70, 0x6f, 0x6e, 0x54, 0x6f, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x65,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x5f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x6c, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x5f, 0x71, 0x75, 0x69, 0x63, 0x6b, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x51, 0x75, 0x69, 0x63, 0x6b, 0x6e,
	0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x79, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x77, 0x65, 0x61,
	0x70, 0x6f, 0x6e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x12, 0x3a, 0x0a, 0x19, 0x64, 0x75,
	0x61, 0x6c, 0x5f, 0x77, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x64,
	0x75, 0x61, 0x6c, 0x57, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x75, 0x6e, 0x6c, 0x65, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x75, 0x6e, 0x6c, 0x65, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x69, 0x63, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x65, 0x6d, 0x69, 0x63, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x67, 0x75,
	0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x47, 0x75, 0x69, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x2d, 0x0a,
	0x12, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x6f, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x0d,
	0x74, 0x69, 0x64, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x79, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x74, 0x69, 0x64, 0x61, 0x6c, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x79, 0x12, 0x2b, 0x0a, 0x11, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x73, 0x77, 0x69,
	0x66, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x53, 0x77, 0x69, 0x66, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x26,
	0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x5f, 0x74, 0x69, 0x64, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x65,
	0x6d, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x61, 0x6e, 0x61, 0x54, 0x69, 0x64,
	0x65, 0x54, 0x6f, 0x74, 0x65, 0x6d, 0x12, 0x29, 0x0a, 0x10, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x5f, 0x62, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x20, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0f, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x6c, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x22, 0xb0, 0x03, 0x0a, 0x0f, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53,
	0x68, 0x61, 0x6d, 0x61, 0x6e, 0x12, 0x3f, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x07, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x53, 0x68,
	0x61, 0x6d, 0x61, 0x6e, 0x54, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x45, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x14,
	0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x33, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x48, 0x0a,
	0x09, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e,
	0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x4c, 0x42, 0x43, 0x4c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x4c, 0x4f, 0x6e, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x63, 0x61, 0x73, 0x74, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x64, 0x61,
	0x70, 0x74, 0x69, 0x76, 0x65, 0x10, 0x03, 0x1a, 0x3b, 0x0a, 0x16, 0x45, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x6c, 0x53, 0x68, 0x61, 0x6d, 0x61, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x61, 0x74, 0x65, 0x72, 0x53, 0x68,
	0x69, 0x65, 0x6c, 0x64, 0x42, 0x06, 0x5a, 0x04, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_shaman_proto_rawDescOnce sync.Once
	file_shaman_proto_rawDescData = file_shaman_proto_rawDesc
)

func file_shaman_proto_rawDescGZIP() []byte {
	file_shaman_proto_rawDescOnce.Do(func() {
		file_shaman_proto_rawDescData = protoimpl.X.CompressGZIP(file_shaman_proto_rawDescData)
	})
	return file_shaman_proto_rawDescData
}

var file_shaman_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_shaman_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_shaman_proto_goTypes = []interface{}{
	(ElementalShaman_ElementalShamanAgent_AgentType)(0), // 0: api.ElementalShaman.ElementalShamanAgent.AgentType
	(*ShamanTalents)(nil),                               // 1: api.ShamanTalents
	(*ElementalShaman)(nil),                             // 2: api.ElementalShaman
	(*ElementalShaman_ElementalShamanAgent)(nil),        // 3: api.ElementalShaman.ElementalShamanAgent
	(*ElementalShaman_ElementalShamanOptions)(nil),      // 4: api.ElementalShaman.ElementalShamanOptions
}
var file_shaman_proto_depIdxs = []int32{
	3, // 0: api.ElementalShaman.agent:type_name -> api.ElementalShaman.ElementalShamanAgent
	1, // 1: api.ElementalShaman.talents:type_name -> api.ShamanTalents
	4, // 2: api.ElementalShaman.options:type_name -> api.ElementalShaman.ElementalShamanOptions
	0, // 3: api.ElementalShaman.ElementalShamanAgent.type:type_name -> api.ElementalShaman.ElementalShamanAgent.AgentType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_shaman_proto_init() }
func file_shaman_proto_init() {
	if File_shaman_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_shaman_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShamanTalents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shaman_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementalShaman); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shaman_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementalShaman_ElementalShamanAgent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_shaman_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementalShaman_ElementalShamanOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_shaman_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_shaman_proto_goTypes,
		DependencyIndexes: file_shaman_proto_depIdxs,
		EnumInfos:         file_shaman_proto_enumTypes,
		MessageInfos:      file_shaman_proto_msgTypes,
	}.Build()
	File_shaman_proto = out.File
	file_shaman_proto_rawDesc = nil
	file_shaman_proto_goTypes = nil
	file_shaman_proto_depIdxs = nil
}
