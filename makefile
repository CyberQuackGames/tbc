# Recursive wildcard function
rwildcard=$(foreach d,$(wildcard $(1:=/*)),$(call rwildcard,$d,$2) $(filter $(subst *,%,$2),$d))

# Where to put item files generated by the item tool
itemsOutDir=items

# Make everything. Keep this first so it's the default rule.
docs: elemental_shaman docs/lib.wasm docs/sim_worker.js

elemental_shaman: docs/elemental_shaman/index.js docs/elemental_shaman/index.css docs/elemental_shaman/index.html detailed_results

detailed_results: docs/detailed_results/index.js docs/detailed_results/index.css docs/detailed_results/index.html

clean:
	rm -f ui/core/api/api.ts
	rm -f ui/core/api/common.ts
	rm -f ui/core/api/druid.ts
	rm -f ui/core/api/shaman.ts
	rm -rf docs

# Host a local server, for dev testing
host: docs
	npx http-server docs

ui/core/api/api.ts: api/*.proto
	mkdir -p docs/protobuf-ts
	cp -r node_modules/@protobuf-ts/runtime/build/es2015/* docs/protobuf-ts
	sed -i -E "s/from '(.*)';/from '\1\.js';/g" docs/protobuf-ts/*
	sed -i -E "s/from \"(.*)\";/from '\1\.js';/g" docs/protobuf-ts/*
	# This is needed for local hosting, since github pages serves under the 'tbc' directory.
	mkdir -p docs/tbc/protobuf-ts
	cp -r docs/protobuf-ts docs/tbc
	npx protoc --ts_opt generate_dependencies --ts_out ui/core/api --proto_path api api/api.proto

docs/core/tsconfig.tsbuildinfo: $(call rwildcard,ui/core,*.ts) ui/core/api/api.ts
	npx tsc -p ui/core
	sed -i 's/@protobuf-ts\/runtime/\/tbc\/protobuf-ts\/index/g' docs/core/api/*.js
	sed -i -E "s/from \"(.*?)(\.js)?\";/from '\1\.js';/g" docs/core/api/*.js

# Generic rule for building index.js for any class directory
docs/%/index.js: ui/%/index.ts ui/%/*.ts docs/core/tsconfig.tsbuildinfo
	npx tsc -p $(<D) 

# Generic rule for building index.css for any class directory
docs/%/index.css: ui/%/index.scss ui/%/*.scss $(call rwildcard,ui/core,*.scss)
	mkdir -p $(@D)
	npx sass $< $@

# Generic rule for building index.html for any class directory
docs/%/index.html: index_template.html
	$(eval title := $(shell echo $(shell basename $(@D)) | sed -r 's/(^|_)([a-z])/\U \2/g' | cut -c 2-))
	echo $(title)
	mkdir -p $(@D)
	cat index_template.html | sed 's/@@TITLE@@/TBC $(title) Simulator/g' > $@

.PHONY: wasm
wasm: docs/lib.wasm

docs/sim_worker.js: ui/worker/sim_worker.js
	cp ui/worker/sim_worker.js docs

docs/lib.wasm: cmd/simwasm/* sim/api/api.pb.go $(call rwildcard,sim,*.go)
	GOOS=js GOARCH=wasm go build -o ./docs/lib.wasm ./cmd/simwasm/

# Just builds the server binary
simweb: sim/api/api.pb.go
	go build -o simweb ./cmd/simweb/web.go

# Starts up a webserver hosting the docs/ and API endpoints.
runweb: sim/api/api.pb.go
	go run ./cmd/simweb/web.go

sim/api/api.pb.go: api/*.proto
	protoc -I=./api --go_out=./sim ./api/*.proto

.PHONY: items
items: $(itemsOutDir)/all.go

$(itemsOutDir)/all.go: generate_items/*.go $(call rwildcard,sim/api,*.go)
	go run generate_items/*.go -outDir=$(itemsOutDir)
