package core

import (
	"fmt"
	"github.com/wowsims/tbc/sim/core/stats"
)

// Callback for after a spell hits the target, before damage has been calculated.
// Use it to modify the spell damage or results.
type OnBeforeSpellHit func(sim *Simulation, spellCast *SpellCast, spellEffect *SpellHitEffect)

// Callback for after a spell hits the target and after damage is calculated. Use it for proc effects
// or anything that comes from the final result of the spell.
type OnSpellHit func(sim *Simulation, spellCast *SpellCast, spellEffect *SpellEffect)

// OnBeforePeriodicDamage is called when dots tick, before damage is calculated.
// Use it to modify the spell damage or results.
type OnBeforePeriodicDamage func(sim *Simulation, spellCast *SpellCast, spellEffect *SpellEffect, tickDamage *float64)

// OnPeriodicDamage is called when dots tick, after damage is calculated. Use it for proc effects
// or anything that comes from the final result of a tick.
type OnPeriodicDamage func(sim *Simulation, spellCast *SpellCast, spellEffect *SpellEffect, tickDamage float64)

// A Spell is a type of cast that can hit/miss using spell stats, and has a spell school.
type SpellCast struct {
	// Embedded Cast
	Cast

	// Results from the spell cast. Spell casts can have multiple effects (e.g.
	// Chain Lightning, Moonfire) so these are totals from all the effects.
	Hits               int32
	Misses             int32
	Crits              int32
	PartialResists_1_4 int32   // 1/4 of the spell was resisted
	PartialResists_2_4 int32   // 2/4 of the spell was resisted
	PartialResists_3_4 int32   // 3/4 of the spell was resisted
	TotalDamage        float64 // Damage done by this cast.
	TotalThreat        float64 // Threat generated by this cast.

	// Melee only stats
	Dodges  int32
	Glances int32
	Parries int32
	Blocks  int32
}

type SpellEffect struct {
	// Target of the spell.
	Target *Target

	// Bonus stats to be added to the spell.
	BonusSpellHitRating  float64
	BonusSpellPower      float64
	BonusSpellCritRating float64

	BonusHitRating        float64
	BonusAttackPower      float64
	BonusCritRating       float64
	BonusExpertiseRating  float64
	BonusArmorPenetration float64
	BonusWeaponDamage     float64

	BonusAttackPowerOnTarget float64

	// Additional multiplier that is always applied.
	DamageMultiplier float64

	// applies fixed % increases to damage at cast time.
	//  Only use multipliers that don't change for the lifetime of the sim.
	//  This should probably only be mutated in a template and not changed in auras.
	StaticDamageMultiplier float64

	// Multiplier for all threat generated by this effect.
	ThreatMultiplier float64

	// Adds a fixed amount of threat to this spell, before multipliers.
	FlatThreatBonus float64

	// Controls which effects can proc from this effect.
	ProcMask ProcMask

	// Causes the first roll for this hit to be copied from ActiveMeleeAbility.Effects[0].HitType.
	// This is only used by Shaman Stormstrike.
	ReuseMainHitRoll bool

	// Callbacks for providing additional custom behavior.
	OnSpellHit OnSpellHit

	// Results
	Outcome HitOutcome
	Damage  float64 // Damage done by this cast.
	Threat  float64

	// Certain damage multiplier, such as target debuffs and crit multipliers, do
	// not count towards the AOE cap. Store them here to they can be subtracted
	// later when calculating AOE cap.
	BeyondAOECapMultiplier float64
}

func (spellEffect *SpellEffect) Landed() bool {
	return spellEffect.Outcome.Matches(OutcomeLanded)
}

func (spellEffect *SpellEffect) TotalThreatMultiplier(spellCast *SpellCast) float64 {
	return spellEffect.ThreatMultiplier * spellCast.Character.PseudoStats.ThreatMultiplier
}

func (spellEffect *SpellEffect) calcThreat(spellCast *SpellCast) float64 {
	if spellEffect.Landed() {
		return (spellEffect.Damage + spellEffect.FlatThreatBonus) * spellEffect.TotalThreatMultiplier(spellCast)
	} else {
		return 0
	}
}

func (she *SpellHitEffect) beforeCalculations(sim *Simulation, spell *SimpleSpell) {
	se := &she.SpellEffect
	se.beforeCalculations(sim, spell, she)
}

func (spellEffect *SpellEffect) beforeCalculations(sim *Simulation, spell *SimpleSpell, she *SpellHitEffect) {
	spellEffect.BeyondAOECapMultiplier = 1
	multiplierBeforeTargetEffects := spellEffect.DamageMultiplier

	spell.Character.OnBeforeSpellHit(sim, &spell.SpellCast, she)
	spellEffect.Target.OnBeforeSpellHit(sim, &spell.SpellCast, she)

	spellEffect.BeyondAOECapMultiplier *= spellEffect.DamageMultiplier / multiplierBeforeTargetEffects

	if spell.OutcomeRollCategory == OutcomeRollCategoryNone || spell.SpellExtras.Matches(SpellExtrasAlwaysHits) {
		spellEffect.Outcome = OutcomeHit
	} else if spellEffect.ReuseMainHitRoll { // TODO: can we remove this.
		spellEffect.Outcome = spell.Effects[0].Outcome
	} else if spell.OutcomeRollCategory.Matches(OutcomeRollCategoryMagic) {
		if spellEffect.hitCheck(sim, &spell.SpellCast) {
			spellEffect.Outcome = OutcomeHit
		} else {
			spellEffect.Outcome = OutcomeMiss
		}
	} else if spell.OutcomeRollCategory.Matches(OutcomeRollCategoryPhysical) {
		spellEffect.Outcome = spellEffect.WhiteHitTableResult(sim, spell)
	}

	if spellEffect.Landed() {
		if spellEffect.critCheck(sim, &spell.SpellCast) {
			spellEffect.Outcome = OutcomeCrit
		}
	}
}

func (spellEffect *SpellEffect) triggerSpellProcs(sim *Simulation, spell *SimpleSpell) {
	if spellEffect.OnSpellHit != nil {
		spellEffect.OnSpellHit(sim, &spell.SpellCast, spellEffect)
	}
	spell.Character.OnSpellHit(sim, &spell.SpellCast, spellEffect)
	spellEffect.Target.OnSpellHit(sim, &spell.SpellCast, spellEffect)
}

func (spellEffect *SpellEffect) afterCalculations(sim *Simulation, spell *SimpleSpell) {
	if sim.Log != nil && !spell.SpellExtras.Matches(SpellExtrasAlwaysHits) {
		spell.Character.Log(sim, "%s %s. (Threat: %0.3f)", spell.ActionID, spellEffect, spellEffect.calcThreat(&spell.SpellCast))
	}

	spellEffect.triggerSpellProcs(sim, spell)
}

// Calculates a hit check using the stats from this spell.
func (spellEffect *SpellEffect) hitCheck(sim *Simulation, spellCast *SpellCast) bool {
	hit := 0.83 + (spellCast.Character.GetStat(stats.SpellHit)+spellEffect.BonusSpellHitRating)/(SpellHitRatingPerHitChance*100)
	hit = MinFloat(hit, 0.99) // can't get away from the 1% miss

	return sim.RandomFloat("SpellCast Hit") < hit
}

// Calculates a crit check using the stats from this spell.
func (spellEffect *SpellEffect) critCheck(sim *Simulation, spellCast *SpellCast) bool {
	switch spellCast.CritRollCategory {
	case CritRollCategoryMagical:
		critChance := (spellCast.Character.GetStat(stats.SpellCrit) + spellCast.BonusCritRating + spellEffect.BonusSpellCritRating) / (SpellCritRatingPerCritChance * 100)
		return sim.RandomFloat("DirectSpell Crit") < critChance
	case CritRollCategoryPhysical:
		critChance := (spellCast.Character.GetStat(stats.MeleeCrit)+spellCast.BonusCritRating+spellEffect.BonusCritRating)/(MeleeCritRatingPerCritChance*100) - spellEffect.Target.CritSuppression
		return sim.RandomFloat("weapon swing") < critChance
	default:
		return false
	}
}

func (spellEffect *SpellEffect) applyResultsToCast(spellCast *SpellCast) {
	if spellEffect.Outcome.Matches(OutcomeHit) {
		spellCast.Hits++
	}
	if spellEffect.Outcome.Matches(OutcomeGlance) {
		spellCast.Glances++
	}
	if spellEffect.Outcome.Matches(OutcomeCrit) {
		spellCast.Crits++
	}
	if spellEffect.Outcome.Matches(OutcomeBlock) {
		spellCast.Blocks++
	}

	if spellEffect.Landed() {
		if spellEffect.Outcome.Matches(OutcomePartial1_4) {
			spellCast.PartialResists_1_4++
		} else if spellEffect.Outcome.Matches(OutcomePartial2_4) {
			spellCast.PartialResists_2_4++
		} else if spellEffect.Outcome.Matches(OutcomePartial3_4) {
			spellCast.PartialResists_3_4++
		}
	} else {
		if spellEffect.Outcome == OutcomeMiss {
			spellCast.Misses++
		} else if spellEffect.Outcome == OutcomeDodge {
			spellCast.Dodges++
		} else if spellEffect.Outcome == OutcomeParry {
			spellCast.Parries++
		}
	}

	spellCast.TotalDamage += spellEffect.Damage
	spellCast.TotalThreat += spellEffect.calcThreat(spellCast)
}

func (hitEffect *SpellHitEffect) calculateDirectDamage(sim *Simulation, spellCast *SpellCast) {
	character := spellCast.Character

	baseDamage := hitEffect.DirectInput.MinBaseDamage + sim.RandomFloat("DirectSpell Base Damage")*(hitEffect.DirectInput.MaxBaseDamage-hitEffect.DirectInput.MinBaseDamage)

	schoolBonus := 0.0
	// Use outcome roll to decide if it should use AP or spell school for bonus damage.
	isPhysical := spellCast.OutcomeRollCategory.Matches(OutcomeRollCategoryPhysical)
	if isPhysical {
		if spellCast.OutcomeRollCategory.Matches(OutcomeRollCategoryRanged) {
			schoolBonus = character.stats[stats.RangedAttackPower]
		} else if spellCast.SpellSchool == SpellSchoolPhysical {
			schoolBonus = character.stats[stats.AttackPower]
		}
		schoolBonus += hitEffect.BonusAttackPower
	} else {
		schoolBonus = character.GetStat(stats.SpellPower) + character.GetStat(spellCast.SpellSchool.Stat()) + hitEffect.SpellEffect.BonusSpellPower
	}
	damage := baseDamage + (schoolBonus * hitEffect.DirectInput.SpellCoefficient) + hitEffect.DirectInput.FlatDamageBonus
	damage *= hitEffect.SpellEffect.DamageMultiplier * hitEffect.SpellEffect.StaticDamageMultiplier

	hitEffect.applyResistances(sim, spellCast, &damage)

	//if hitEffect.SpellEffect.critCheck(sim, spellCast) {
	//	hitEffect.Outcome |= OutcomeCrit
	//	damage *= spellCast.CritMultiplier
	//	hitEffect.SpellEffect.BeyondAOECapMultiplier *= spellCast.CritMultiplier
	//}
	if hitEffect.Outcome.Matches(OutcomeCrit) {
		damage *= spellCast.CritMultiplier
		hitEffect.SpellEffect.BeyondAOECapMultiplier *= spellCast.CritMultiplier
	}

	hitEffect.SpellEffect.Damage = damage
}

func (spellEffect *SpellEffect) String() string {
	outcomeStr := spellEffect.Outcome.String()
	if !spellEffect.Landed() {
		return outcomeStr
	}
	return fmt.Sprintf("%s for %0.3f damage", outcomeStr, spellEffect.Damage)
}

// Modifies damage based on Armor or Magic resistances, depending on the damage type.
func (hitEffect *SpellHitEffect) applyResistances(sim *Simulation, spellCast *SpellCast, damage *float64) {
	if spellCast.SpellExtras.Matches(SpellExtrasIgnoreResists) {
		return
	}

	if spellCast.SpellSchool.Matches(SpellSchoolPhysical) {
		// Physical resistance (armor).
		*damage *= 1 - hitEffect.Target.ArmorDamageReduction(spellCast.Character.stats[stats.ArmorPenetration]+hitEffect.BonusArmorPenetration)
	} else if !spellCast.SpellExtras.Matches(SpellExtrasBinary) {
		// Magical resistance.
		// https://royalgiraffe.github.io/resist-guide

		resistanceRoll := sim.RandomFloat("DirectSpell Resist")
		if resistanceRoll > 0.18 { // 13% chance for 25% resist, 4% for 50%, 1% for 75%
			// No partial resist.
		} else if resistanceRoll > 0.05 {
			hitEffect.SpellEffect.Outcome |= OutcomePartial1_4
			*damage *= 0.75
		} else if resistanceRoll > 0.01 {
			hitEffect.SpellEffect.Outcome |= OutcomePartial2_4
			*damage *= 0.5
		} else {
			hitEffect.SpellEffect.Outcome |= OutcomePartial3_4
			*damage *= 0.25
		}
	}
}
