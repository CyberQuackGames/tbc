package priest

import (
	"time"

	"github.com/wowsims/tbc/sim/core"
	"github.com/wowsims/tbc/sim/core/stats"
)

// Starfire spell IDs
const SpellIDShadowfiend int32 = 34433

var ShadowfiendCD = core.NewCooldownID()

func (priest *Priest) newShadowfiendTemplate(sim *core.Simulation) core.SimpleSpellTemplate {
	baseCast := core.Cast{
		Name:           "Shadowfiend",
		CritMultiplier: 1.5,
		SpellSchool:    stats.ShadowSpellPower,
		Character:      &priest.Character,
		BaseManaCost:   575,
		ManaCost:       575,
		CastTime:       0,
		ActionID: core.ActionID{
			SpellID:    SpellIDShadowfiend,
			CooldownID: ShadowfiendCD,
		},
	}

	// Dmg over 15 sec = shadow_dmg*.6 + 1191
	// just simulate 10 1.5s long ticks
	effect := core.SpellHitEffect{
		SpellEffect: core.SpellEffect{
			DamageMultiplier: 1,
		},
		DotInput: core.DotDamageInput{
			NumberOfTicks:        10,
			TickLength:           time.Millisecond * 1500,
			TickBaseDamage:       1191 / 10,
			TickSpellCoefficient: 0.06,
			OnDamageTick: func(sim *core.Simulation, damage float64) {
				s := stats.Stats{stats.Mana: damage * 2.5}
				if sim.Log != nil {
					sim.Log("Shadowfiend Regenerated %0f mana.\n", s[stats.Mana])
				}
				priest.AddStats(s)
			},
		},
	}

	effect.DotInput.NumberOfTicks += int(priest.Talents.ImprovedShadowWordPain) // extra tick per point
	priest.applyTalentsToShadowSpell(&baseCast, &effect)

	return core.NewSimpleSpellTemplate(core.SimpleSpell{
		SpellCast: core.SpellCast{
			Cast: baseCast,
		},
		SpellHitEffect: effect,
	})
}

func (priest *Priest) NewShadowfiend(sim *core.Simulation, target *core.Target) *core.SimpleSpell {
	// Initialize cast from precomputed template.
	mf := &priest.ShadowfiendSpell

	priest.shadowfiendTemplate.Apply(mf)

	// Set dynamic fields, i.e. the stuff we couldn't precompute.
	mf.Target = target
	mf.Init(sim)

	return mf
}

// class ShadowfiendMelee : AutoAttackBase() {
//     companion object {
//         const val name = "Melee (Shadowfiend)"
//     }

//     override val id: Int = 1
//     override val name: String = Companion.name
//     override val icon: String = "ability_meleedamage.jpg"
//     override val damageType = Constants.DamageType.SHADOW

//     val basePetAttackSpeed: Double = 1500.0
//     override fun item(sp: SimParticipant): Item {
//         return object : Item() {
//             override var isAutoGenerated: Boolean = false
//             override var id: Int = -1
//             override var name: String = "Melee (Shadowfiend)"
//             override var itemLevel: Int = 1
//             override var quality: Int = 1
//             override var icon: String = ""
//             override var itemSet: ItemSet? = null
//             override var inventorySlot: Int = 21
//             override var itemClass: Constants.ItemClass? = null
//             override var itemSubclass: Constants.ItemSubclass? = null
//             override var minDmg: Double = 99.0 + 0.12 * (sp.stats.attackPower.toDouble().coerceAtLeast(286.0) - 286.0)
//             override var maxDmg: Double = 123.0 + 0.12 * (sp.stats.attackPower.toDouble().coerceAtLeast(286.0) - 286.0)
//             override var speed: Double = basePetAttackSpeed
//             override var stats: Stats = Stats()
//             override var sockets: Array<Socket> = arrayOf()
//             override var socketBonus: SocketBonus? = null
//             override var phase = 1
//         }
//     }
// }

// class ManaLeech : Buff() {
//     companion object {
//         const val name = "Mana Leech"
//     }

//     override val id = 28305
//     override val name: String = Companion.name
//     override val icon: String = "spell_shadow_shadowmend.jpg"
//     override val durationMs: Int = -1
//     override val hidden: Boolean = true

//     val mlAbility = object : Ability() {
//         override val name: String = Companion.name
//         override val icon: String = "spell_shadow_shadowmend.jpg"
//     }

//     val proc = object : Proc() {
//         override val triggers: List<Trigger> = listOf(
//             Trigger.MELEE_AUTO_CRIT,
//             Trigger.MELEE_AUTO_HIT,
//         )
//         override val type: Type = Type.STATIC

//         override fun proc(sp: SimParticipant, items: List<Item>?, ability: Ability?, event: Event?) {
//             if (sp.owner == null || event == null) return

//             // https://web.archive.org/web/20071201221602/http://www.shadowpriest.com/viewtopic.php?t=7616
//             sp.owner.addResource((event.amount * 2.5).toInt(), Resource.Type.MANA, mlAbility)
//         }
//     }

//     override fun procs(sp: SimParticipant): List<Proc> = listOf(proc)
// }
